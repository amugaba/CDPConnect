<?xml version="1.0" encoding="utf-8"?>
<dci:DCIForm xmlns:fx="http://ns.adobe.com/mxml/2009" 
			 xmlns:s="library://ns.adobe.com/flex/spark" 
			 xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:dci="components.dci.*" width="100%" height="100%"
			 labelWidth="370">
	<fx:Script>
		<![CDATA[
			import components.questions.QuestionClass;
			import components.questions.QuestionList;
			import components.questions.QuestionText;
			import components.skips.SkipMultipleHandler;
			import components.skips.SkipPattern;
			import components.validators.DropDownValidator;
			import components.validators.Valid;
			
			import mx.collections.ArrayCollection;
			import mx.collections.ArrayList;
			import mx.containers.FormItem;
			import mx.controls.Alert;
			import mx.states.OverrideBase;
			
			public var qFamilyActiveDuty:QuestionList = new QuestionList("FamilyActiveDuty","Is anyone in your immediate family currently serving as a member of one of the branches of the United States Uniformed Services on active duty, reserve components or National Guard?",new ArrayList(["No","Yes, only one","Yes, more than one","Refused","Don't Know","Missing Data"]),0);
			public var qServiceMemRelationship:QuestionList = new QuestionList("ServiceMemRelationship","What is the relationship of that person (Service Member) to you?",new ArrayList(["Mother","Father","Brother","Sister","Spouse","Partner","Daughter","Son","Self","Other","Missing Data"]),0);
			public var qServiceMemExpOther:QuestionText = new QuestionText("ServiceMemExpOther","Other, specify","");
			public var qServiceMemExpDeployed:QuestionList = new QuestionList("ServiceMemExpDeployed","Deployed in support of combat operations (e.g., Iraq or Afghanistan)?",ynrdm,1);
			public var qServiceMemExpInjured:QuestionList = new QuestionList("ServiceMemExpInjured","Was physically injured during combat operations?",ynrdm,1);
			public var qServiceMemExpCombatStress:QuestionList = new QuestionList("ServiceMemExpCombatStress","Developed combat stress symptoms/ difficulties adjusting following deployment, including PTSD, depression, or " +
				"suicidal thoughts?",ynrdm,1);
			public var qServiceMemExpDeceased:QuestionList = new QuestionList("ServiceMemExpDeceased","Died or was killed?",ynrdm,1);
			
			[Bindable] public var familyVeterans:ArrayList = new ArrayList();
			
			//Military2 Form Area
			public override function createForm():void
			{
				viewstackIndex = 7;
				
				//Questions
				addQuestion(qFamilyActiveDuty, 150);
				createText("The following four questions relate to experiences you or a member of your immediate family may have had while serving.","h1");
				addElement(qServiceMemRelationship);
				addElement(qServiceMemExpOther);
				createText("Has the Service Member experienced any of the following?","h1");
				addElement(qServiceMemExpDeployed);
				addElement(qServiceMemExpInjured);
				addElement(qServiceMemExpCombatStress);
				addElement(qServiceMemExpDeceased);
				createText("Complete the above questions for each family member and then click 'Add'. To remove an item, select it in the list to the right, and then click 'Remove'.","h1");
				setElementIndex(military2Group,numElements-1);
				
				//Validators
				Valid.addDropDownValidator(qFamilyActiveDuty,["No","Refused","Don't Know","Missing Data"]);
				
				//Control Logic
				addSkipDropDown(qServiceMemRelationship,["Self","Mother","Father","Brother","Sister","Spouse","Partner","Daughter","Son","Missing Data"],[qServiceMemExpOther]);
				addSkipDropDown(qServiceMemRelationship,["Self"],[qServiceMemExpDeceased]);
				addSkipDropDown(qFamilyActiveDuty,["No","Refused","Don't Know","Missing Data"],[qServiceMemRelationship,qServiceMemExpDeployed,qServiceMemExpInjured,qServiceMemExpCombatStress,qServiceMemExpDeceased]);
				(qFamilyActiveDuty.skipPatterns[0] as SkipPattern).skipWhenInvalid = true;
			}
			
			protected function military2AddButtonHandler(event:MouseEvent):void
			{
				if((qFamilyActiveDuty.answer == "Yes, only one" && familyVeterans.length > 0) || 
					(qFamilyActiveDuty.answer == "Yes, more than one" && familyVeterans.length > 5))
					Alert.show("More relations cannot be added with current answer to Question 1");
				else if(qServiceMemRelationship.answer == "Other" && qServiceMemExpOther.answer == "")
					Alert.show("Relationship Other, Specify cannot be blank.");
				else
					familyVeterans.addItem([qServiceMemRelationship.answer,qServiceMemExpOther.answer,qServiceMemExpDeployed.answer,qServiceMemExpInjured.answer,
						qServiceMemExpCombatStress.answer,qServiceMemExpDeceased.answer]);
				updateFamilyValidator();
			}
			
			protected function military2RemoveButtonHandler(event:MouseEvent):void
			{
				if(military2List.selectedItem != null)
					familyVeterans.removeItemAt(familyVeterans.getItemIndex(military2List.selectedItem));
				updateFamilyValidator();
			}
			
			public function updateFamilyValidator():void
			{
				var dv:DropDownValidator = qFamilyActiveDuty.validators[0] as DropDownValidator;
				if(familyVeterans.length == 0)
				{
					dv.validAnswers = ["No","Refused","Don't Know","Missing Data"];
				}
				else if(familyVeterans.length == 1)
				{
					dv.validAnswers = ["Yes, only one"];
				}
				else
				{
					dv.validAnswers = ["Yes, more than one"];
				}
				dv.validate();
			}
			
			public override function resetForm():void
			{
				super.resetForm();
				familyVeterans = new ArrayList();
				updateFamilyValidator();
			}
			
			public override function saveData(gpraData:Array):Array
			{
				super.saveData(gpraData);
				
				var i:Number = 1;
				for each(var arr:Array in familyVeterans.source)
				{
					var relation:String = arr[0];
					var relationOther:String = arr[1];
					var deployed:String = arr[2];
					var injured:String = arr[3];
					var stressed:String = arr[4];
					var dead:String = arr[5];
					
					gpraData["ServiceMemRelationship"+String(i)] = getIndexFromValue(relation, qServiceMemRelationship);
					if(relation == "Other")
						gpraData["ServiceMemExpOther"+String(i)] = relationOther;
					
					gpraData["ServiceMemExpDeployed"+String(i)] = getIndexFromValue(deployed, qServiceMemExpDeployed);
					gpraData["ServiceMemExpInjured"+String(i)] = getIndexFromValue(injured, qServiceMemExpInjured);
					gpraData["ServiceMemExpCombatStress"+String(i)] = getIndexFromValue(stressed, qServiceMemExpCombatStress);
					gpraData["ServiceMemExpDeceased"+String(i)] = getIndexFromValue(dead, qServiceMemExpDeceased);

					i += 1;
				}
				return gpraData;
			}
			
			public override function loadData(data:Array):void
			{
				super.loadData(data);
				
				familyVeterans = new ArrayList();
				for(var i:int = 1; i <= 6; i++)
				{
					if(data["ServiceMemRelationship"+String(i)] == null)
						break;
					
					var relation:String = getValueFromDBIndex(data["ServiceMemRelationship"+String(i)], qServiceMemRelationship);
					var relationOther:String = "";
					if(data["ServiceMemExpOther"+String(i)] != null)
						relationOther = data["ServiceMemExpOther"+String(i)].toString();
					var deployed:String = getValueFromDBIndex(data["ServiceMemExpDeployed"+String(i)], qServiceMemExpDeployed);
					var injured:String = getValueFromDBIndex(data["ServiceMemExpInjured"+String(i)], qServiceMemExpInjured);
					var stressed:String = getValueFromDBIndex(data["ServiceMemExpCombatStress"+String(i)], qServiceMemExpCombatStress);
					var dead:String = getValueFromDBIndex(data["ServiceMemExpDeceased"+String(i)], qServiceMemExpDeceased);
					
					familyVeterans.addItem([relation,relationOther,deployed,injured,stressed,dead]);
				}
				updateFamilyValidator();
			}
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<s:Group width="400" height="100" id="military2Group">
		<s:List id="military2List" width="300" height="75" x="50" y="0"
				dataProvider="{familyVeterans}" allowMultipleSelection="false"></s:List>
		<s:Button label="Add" click="military2AddButtonHandler(event)" x="360" y="10"/>
		<s:Button label="Remove" click="military2RemoveButtonHandler(event)" x="360" y="40"/>
	</s:Group>
</dci:DCIForm>

<?xml version="1.0" encoding="utf-8"?>
<dci:DCIForm xmlns:fx="http://ns.adobe.com/mxml/2009" 
			 xmlns:s="library://ns.adobe.com/flex/spark" 
			 xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:dci="components.dci.*" width="100%" height="100%">
	<fx:Script>
		<![CDATA[
			import components.QuestionClass;
			import components.QuestionList;
			import components.QuestionText;
			import components.QuestionTextRefusable;
			import components.SkipMultipleHandler;
			import components.SkipPattern;
			
			import mx.binding.utils.BindingUtils;
			import mx.collections.ArrayList;
			import mx.validators.NumberValidator;
			
			public var qAlcoholDays:QuestionTextRefusable = new QuestionTextRefusable("AlcoholDays","Alcoholic beverages","0");
			public var qAlcoholIntoxDays:QuestionTextRefusable = new QuestionTextRefusable("AlcoholIntoxDays","Alcohol to intoxication (4 drinks in one sitting)","0");
			private var intoxMale:String = "Alcohol to intoxication (4 drinks in one sitting)";
			private var intoxFemale:String = "Alcohol to intoxication (3 drinks in one sitting)";
			public var qAlcoholDrugBothDays:QuestionTextRefusable = new QuestionTextRefusable("AlcoholDrugBothDays","Both alcohol and drugs (on the same day)","0");
			public var qIllegalDrugsDays:QuestionTextRefusable = new QuestionTextRefusable("IllegalDrugsDays","Any illegal drugs including prescription drugs that were taken for reasons or in doses other than prescribed","0");
			
			private static var route:ArrayList = new ArrayList(["Oral","Nasal","Smoking","Non-IV Injection","IV","Refused","Don't Know","Missing Data"]);
			public var qCocaineCrackDays:QuestionTextRefusable = new QuestionTextRefusable("CocaineCrackDays","Cocaine (coke, crack)","0");
			public var qCocaineCrackRoute:QuestionList = new QuestionList("CocaineCrackRoute","",route,0);
			public var qPrescriptionStimDays:QuestionTextRefusable = new QuestionTextRefusable("PrescriptionStimDays","Prescription stimulants (Ritalin, Concerta, Dexedrine, Adderall, diet pills)","0");
			public var qPrescriptionStimRoute:QuestionList = new QuestionList("PrescriptionStimRoute","",route,0);
			public var qMethamDays:QuestionTextRefusable = new QuestionTextRefusable("MethamDays","Methamphetamine (speed, crystal meth, ice)","0");
			public var qMethamRoute:QuestionList = new QuestionList("MethamRoute","",route,0);
			public var qInhalantsDays:QuestionTextRefusable = new QuestionTextRefusable("InhalantsDays","Inhalants (nitrous oxide, glue, gas, paint thinner)","0");
			public var qInhalantsRoute:QuestionList = new QuestionList("InhalantsRoute","",route,0);
			public var qSedativesDays:QuestionTextRefusable = new QuestionTextRefusable("SedativesDays","Sedatives or sleeping pills (Valium, Serepax, Ativan, Librium, Xanax, Rohypnol, GHB)","0");
			public var qSedativesRoute:QuestionList = new QuestionList("SedativesRoute","",route,0);
			public var qHallucinogensDays:QuestionTextRefusable = new QuestionTextRefusable("HallucinogensDays","Hallucinogens (LSD, acid, mushrooms, PCP, Special K, ecstasy)","0");
			public var qHallucinogensRoute:QuestionList = new QuestionList("HallucinogensRoute","",route,0);
			public var qOpioidsDays:QuestionTextRefusable = new QuestionTextRefusable("OpioidsDays","Street opiods (heroin, opium)","0");
			public var qOpioidsRoute:QuestionList = new QuestionList("OpioidsRoute","",route,0);
			public var qPrescriptionOpioidsDays:QuestionTextRefusable = new QuestionTextRefusable("PrescriptionOpioidsDays","Prescription opioids (fentanyl, oxycodone [OxyContin, Percocet], hydrocodone [Vicodin], methadone, buprenorphine)","0");
			public var qPrescriptionOpiodsRoute:QuestionList = new QuestionList("PrescriptionOpiodsRoute","",route,0);
			public var qMarijuanaHashDays:QuestionTextRefusable = new QuestionTextRefusable("MarijuanaHashDays","Cannabis (marijuana, pot, grass, hash)","0");
			public var qMarijuanaHashRoute:QuestionList = new QuestionList("MarijuanaHashRoute","",route,0);
			public var qOtherIllegalDrugsDays:QuestionTextRefusable = new QuestionTextRefusable("OtherIllegalDrugsDays","Other drugs","0");
			public var qOtherIllegalDrugsRoute:QuestionList = new QuestionList("OtherIllegalDrugsRoute","",route,0);
			public var qOtherIllegalDrugsSpec:QuestionText = new QuestionText("OtherIllegalDrugsSpec","Other (Specify)","");
			
			public var drugQuestions:Array = new Array();
			
			//Drug1 Form Area
			public override function createForm():void
			{
				viewstackIndex = 8;
				
				//Questions
				createText("In the past 30 days, how many days have you used...","h1");
				addQuestion(qAlcoholDays);
				addQuestion(qAlcoholIntoxDays);
				addQuestion(qAlcoholDrugBothDays);
				addQuestion(qIllegalDrugsDays);
				
				createText("In the past 30 days, how many days have you used...","h1");				
				addDrugQuestion(qCocaineCrackDays,qCocaineCrackRoute);
				addDrugQuestion(qPrescriptionStimDays,qPrescriptionStimRoute);
				addDrugQuestion(qMethamDays,qMethamRoute);
				addDrugQuestion(qInhalantsDays,qInhalantsRoute);
				addDrugQuestion(qSedativesDays,qSedativesRoute);
				addDrugQuestion(qHallucinogensDays,qHallucinogensRoute);
				addDrugQuestion(qOpioidsDays,qOpioidsRoute);
				addDrugQuestion(qPrescriptionOpioidsDays,qPrescriptionOpiodsRoute);
				addDrugQuestion(qMarijuanaHashDays,qMarijuanaHashRoute);				
				addDrugQuestion(qOtherIllegalDrugsDays,qOtherIllegalDrugsRoute);
				addQuestion(qOtherIllegalDrugsSpec);
			
				
				//Validators				
				addNumberValidator(qAlcoholDays,0,30,true);
				addNumberValidator(qAlcoholIntoxDays,0,0,true);
				addNumberValidator(qIllegalDrugsDays,0,30,true);
				addNumberValidator(qAlcoholDrugBothDays,0,0,true);
				addRequiredValidator(qOtherIllegalDrugsSpec);
				
				BindingUtils.bindSetter(function():void{
					(qAlcoholIntoxDays.validator as NumberValidator).maxValue = Number(qAlcoholDays.answer);
					(qAlcoholDrugBothDays.validator as NumberValidator).maxValue = Number(qAlcoholDays.answer);
				}, qAlcoholDays.inputControl, "text");
				BindingUtils.bindSetter(drugDaysHandler, qIllegalDrugsDays.inputControl, "text");
				
				//Control Logic
				addSkipTextNumber(qAlcoholDays,[qAlcoholIntoxDays,qAlcoholDrugBothDays],["0"]);
				//might be unnecessary
				var handler:SkipMultipleHandler = createSkipMultipleHandler([global.pageGPRA.livingForm.qImpactStress,global.pageGPRA.livingForm.qImpactActivity,global.pageGPRA.livingForm.qImpactEmotional]);
				addSkipTextNumberMultiple(handler,qAlcoholDays,["0"]);
				addSkipTextNumberMultiple(handler,qIllegalDrugsDays,["0"]);
				handler.allMustSkip = true;
				addSkipTextNumber(qOtherIllegalDrugsDays,[qOtherIllegalDrugsSpec],["0"]);
				addSkipTextNumber(qIllegalDrugsDays,[qAlcoholIntoxDays,qAlcoholDrugBothDays],["0"]);
			}
			
			protected function addDrugQuestion(daysQ:QuestionTextRefusable, routeQ:QuestionList, height:int=22):void
			{				
				addQuestion(daysQ);
				daysQ.direction = "horizontal";
				
				questions.push(routeQ);
				daysQ.addElement(routeQ.input);//maybe this is wrong
				routeQ.inline = true;
				
				addNumberValidator(daysQ,0,0,true);
				addSkipTextNumber(daysQ,[routeQ],["0"]);
				drugQuestions.push(daysQ);
			}
			
			protected function drugDaysHandler(val:String):void
			{
				for each(var q:QuestionClass in drugQuestions)
				{
					(q.validator as NumberValidator).maxValue = Number(val);
					for each(var skip:SkipPattern in q.skipPatterns)
						skip.skipHandler(null);
				}
			}
			
			public function setIntoxLabel(isFemale:Boolean):void
			{
				if(isFemale)
					qAlcoholIntoxDays.label = intoxFemale;
				else
					qAlcoholIntoxDays.label = intoxMale;
			}
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
</dci:DCIForm>

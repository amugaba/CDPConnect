<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:clientservice="services.clientservice.*"
		 width="357" height="700" creationComplete="creationCompleteHandler(event)">
	<fx:Script>
		<![CDATA[
			import components.validators.DateValidatorSimple;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			import mx.events.FlexEvent;
			import mx.rpc.events.ResultEvent;
			import mx.validators.DateValidator;
			
			import valueObjects.ClientVO;
			
			[Bindable] protected var clientList:ArrayCollection = new ArrayCollection();
			protected var global:CDPConnectFlex = FlexGlobals.topLevelApplication as CDPConnectFlex;
			protected var dateValidator:DateValidatorSimple;
			
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				dateValidator = new DateValidatorSimple();
				dateValidator.required = false;
				dateValidator.source = searchIntakeDate;
				dateValidator.property = "text";
			}
			
			public function resetGroup():void
			{
				clientIDSearch.text = "";
				clientIDAdd.text = "";
				searchIntakeDate.text = "";
				searchDischarge.selected = false;
				clientList.removeAll();
			}
			
			/**
			 * Searching Clients
			 * */
			protected function searchButton_clickHandler(event:MouseEvent):void
			{
				if(searchIntakeDate.errorString != "")
				{
					Alert.show("Please enter a valid date.");
				}
				else
				{
					var dateString:String = "";
					if(searchIntakeDate.selectedDate != null)
						dateString = global.dateFormatter.format(searchIntakeDate.selectedDate);
					
					searchClientsResult.token = clientService.searchClients(clientIDSearch.text, dateString, searchDischarge.selected);
				}
			}
			
			protected function searchClientsResult_resultHandler(event:ResultEvent):void
			{
				if((searchClientsResult.lastResult as ArrayCollection).length != 0)
					clientList = searchClientsResult.lastResult;
				else
				{
					clientList.removeAll();
					Alert.show("No clients found.");
				}
			}
			
			public function loadButton_clickHandler():void
			{
				global.activeClient = clientGrid.selectedItem as ClientVO;
				global.activeAssessment = null;
				global.pageHome.clientGroup.loadActiveClient();
			}
			
			/**
			 * Creating Clients
			 * */
			protected function addClientButton_clickHandler(event:MouseEvent):void
			{
				if(clientIDAdd.text.length == 15)
					clientExistsResult.token = clientService.clientExists(clientIDAdd.text);
				else
					Alert.show("The client ID must be 15 characters long.","Client NOT Created");
			}
			
			protected function clientExistsResult_resultHandler(event:ResultEvent):void
			{
				if(clientExistsResult.lastResult)
					Alert.show("A client with this ID already exists.","Client NOT Created");
				else
				{
					global.activeClient = new ClientVO();
					global.activeClient.clientid = clientIDAdd.text;
					createClientResult.token = clientService.createClient(global.activeClient);
				}
			}
			
			protected function createClientResult_resultHandler(event:ResultEvent):void
			{
				if(createClientResult.lastResult == null)
					Alert.show("Client not created.","ERROR");
				else
				{
					global.activeClient = createClientResult.lastResult as ClientVO;
					Alert.show("Client added!");
					clientIDAdd.text = "";
					global.pageHome.clientGroup.loadActiveClient();
				}
			}
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<clientservice:ClientService id="clientService"
									 fault="Alert.show(event.fault.faultString + '\n' + event.fault.faultDetail)"
									 showBusyCursor="true"/>
		<s:CallResponder id="searchClientsResult" result="searchClientsResult_resultHandler(event)"/>
		<s:CallResponder id="createClientResult" result="createClientResult_resultHandler(event)"/>
		<s:CallResponder id="clientExistsResult" result="clientExistsResult_resultHandler(event)"/>
	</fx:Declarations>
	<s:Form id="searchForm" y="90" width="235" height="112" defaultButton="{searchButton}"
			fontWeight="bold" horizontalCenter="0">
		<s:layout>
			<s:FormLayout gap="-10"/>
		</s:layout> 
		<s:FormItem label="Client ID">
			<s:TextInput id="clientIDSearch" fontWeight="normal"/>
		</s:FormItem>
		<s:FormItem label="Intake Date">
			<mx:DateField id="searchIntakeDate" width="109" editable="true"/>
		</s:FormItem>
		<s:FormItem label="Discharge">
			<s:CheckBox id="searchDischarge" label="Incomplete?"/>
		</s:FormItem>
	</s:Form>
	<s:Button id="searchButton" y="211" width="105" label="Search Clients"
			  click="searchButton_clickHandler(event)" fontWeight="normal" horizontalCenter="0"/>
	
	<s:DataGrid id="clientGrid" y="247" width="195" height="400" dataProvider="{clientList}"
				horizontalCenter="0" requestedRowCount="5" resizableColumns="false">
		<s:columns>
			<s:ArrayList>
				<s:GridColumn dataField="clientid" headerText="ClientID" width="120"></s:GridColumn>
				<s:GridColumn dataField="load" headerText="Load" width="70">
					<s:itemRenderer>
						<fx:Component>
							<s:GridItemRenderer width="100%">
								<s:Button label="Load" x="7" y="3" width="55" click="{outerDocument.loadButton_clickHandler()}" />
							</s:GridItemRenderer>
						</fx:Component>
					</s:itemRenderer>
				</s:GridColumn>
			</s:ArrayList>
		</s:columns>
		<s:typicalItem>
			<fx:Object clientid="00001"></fx:Object>
		</s:typicalItem>
	</s:DataGrid>
	<s:Label y="0" fontSize="14" fontWeight="bold" horizontalCenter="0" text="Add New Client"/>
	<s:Label y="83" fontSize="14" fontWeight="bold" horizontalCenter="0" text="Search for Clients"/>
	<s:Form id="addForm" x="23" y="7" width="235" height="49" defaultButton="{addClientButton}"
			fontWeight="bold">
		<s:layout>
			<s:FormLayout gap="-10"/>
		</s:layout> 
		<s:FormItem label="Client ID">
			<s:TextInput id="clientIDAdd" fontWeight="normal"/>
		</s:FormItem>
	</s:Form>
	<s:Button id="addClientButton" x="241" y="27" label="Add Client"
			  click="addClientButton_clickHandler(event)" fontWeight="normal"/>
	<mx:HRule x="10" y="62" width="344" height="11"/>
</s:Group>

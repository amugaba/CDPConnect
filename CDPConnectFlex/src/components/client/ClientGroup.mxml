<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:clientservice="services.clientservice.*"
		 xmlns:assessmentservice="services.assessmentservice.*"
		 width="357" height="466">
	<fx:Script>
		<![CDATA[
			import components.assessment.AssessType;
			import components.dci.InterviewType;
			
			import mx.collections.ArrayCollection;
			import mx.collections.ArrayList;
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			import mx.events.ValidationResultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.validators.Validator;
			
			import valueObjects.AssessmentVO;
			import valueObjects.ClientVO;
			
			protected var global:CDPConnectFlex = FlexGlobals.topLevelApplication as CDPConnectFlex;
			[Bindable] public var assessmentList:ArrayCollection = new ArrayCollection();
			
			public function resetGroup():void
			{
				enabled = false;
				assessmentList.removeAll();
				clientID.text = "";
			}
			
			public function loadActiveClient():void
			{
				enabled = true;
				clientID.text = global.activeClient.clientid;
				refreshAssessmentList();
			}
			
			/**
			 * Update Client ID
			 * */
			protected function saveButton_clickHandler(event:MouseEvent):void
			{
				if(clientID.text.length == 15)
					clientExistsResult.token = clientService.clientExists(clientID.text);
				else
					Alert.show("The client ID must be 15 characters long.","Client ID NOT Changed");
			}
			
			protected function clientExistsResult_resultHandler(event:ResultEvent):void
			{
				if(clientExistsResult.lastResult)
					Alert.show("A client with this ID already exists.","Client ID NOT Changed");
				else
				{
					global.activeClient.clientid = clientID.text;
					updateClientResult.token = clientService.updateClient(global.activeClient);
				}
			}
			
			protected function updateClientResult_resultHandler(event:ResultEvent):void
			{
				if(updateClientResult.lastResult != null)
				{
					Alert.show("Client ID Changed.");
					global.activeClient = updateClientResult.lastResult;
				}
				else
					Alert.show("ERROR: Client ID NOT Changed.");
			}
			
			/**
			 * Assessments
			 * */
			public function refreshAssessmentList():void
			{
				//If client loaded, find all assessments
				if(global.activeClient != null)
				{
					getAssessmentsByClientIDResult.token = assessmentService.getAssessmentsByClientID(global.activeClient.autoid);
					enabled = true;
				}
				else //episode list is empty
				{
					assessmentList.removeAll();
					enabled = false;
				}
			}
			
			/**
			 * Populate assessments list
			 * Record the existance of each type of DCIs.
			 * Get intake DCI data if it exists.
			 * */
			protected function getAssessmentsByClientIDResult_resultHandler(event:ResultEvent):void
			{
				assessmentList = getAssessmentsByClientIDResult.lastResult;
				
				//Pull out and identify any DCI intake/discharge/followup
				global.activeClient.intakeExists = false;
				global.activeClient.dischargeExists = false;
				global.activeClient.followupExists = false;
				global.intakeDCI = null;
				
				for each(var assess:AssessmentVO in assessmentList)
				{
					if(assess.type == AssessType.DCI)
					{
						if(InterviewType.isIntake(assess.subtype))
						{
							global.activeClient.intakeExists = true;
							global.intakeDCI = assess;
							global.activeClient.followupSelected = assess.data.source["followupSelected"] == 1;
						}
						else if(InterviewType.isDischarge(assess.subtype))
							global.activeClient.dischargeExists = true;
						else if(InterviewType.isFollowup(assess.subtype))
							global.activeClient.followupExists = true;
					}
				}
			}
			
			/**
			 * Load Screening Assessments
			 * */
			public function loadButton_clickHandler():void
			{
				global.activeAssessment = assessmentGrid.selectedItem as AssessmentVO;
				
				if(global.activeAssessment.type == AssessType.DCI)
				{
					global.pageDCI.loadDCI(global.activeAssessment);
					global.pageViewstack.selectedChild = global.pageDCI;
				}
				else if(global.activeAssessment.type == AssessType.GPRA)
				{
					global.pageDCI.loadDCI(global.activeAssessment);
					global.pageViewstack.selectedChild = global.pageGPRA;
				}
			}	
			
			/**
			 * Create Interviews
			 * */
			protected function createIntake(isDCI:Boolean):void
			{
				if(global.activeClient.intakeExists)
					Alert.show("An Intake interview already exists for this client.");
				else
				{
					global.activeAssessment = null;
					if(isDCI)
					{
						global.pageDCI.newIntake();
						global.pageViewstack.selectedChild = global.pageDCI;
					}
					else
					{
						global.pageGPRA.newIntake();
						global.pageViewstack.selectedChild = global.pageGPRA;
					}
				}
			}
			
			protected function createDischarge(isDCI:Boolean):void
			{
				if(global.activeClient.dischargeExists)
					Alert.show("A Discharge interview already exists for this client.");
				else if(!global.activeClient.intakeExists)
					Alert.show("You must create an Intake interview before creating a Discharge.");
				else
				{
					global.activeAssessment = null;
					if(isDCI)
					{
						global.pageDCI.newDischarge();
						global.pageViewstack.selectedChild = global.pageDCI;
					}
					else
					{
						global.pageGPRA.newDischarge();
						global.pageViewstack.selectedChild = global.pageGPRA;
					}
				}
			}
			
			protected function createFollowup(isDCI:Boolean):void
			{
				if(global.activeClient.followupExists)
					Alert.show("A Followup interview already exists for this client.");
				else if(!global.activeClient.intakeExists)
					Alert.show("You must create an Intake interview before creating a Followup.");
				else if(!global.activeClient.followupSelected)
					Alert.show("This client was not selected for followup.");
				else
				{
					global.activeAssessment = null;
					if(isDCI)
					{
						global.pageDCI.newFollowup();
						global.pageViewstack.selectedChild = global.pageDCI;
					}
					else
					{
						global.pageGPRA.newFollowup();
						global.pageViewstack.selectedChild = global.pageGPRA;
					}
				}
			}
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<s:CallResponder id="updateClientResult" result="updateClientResult_resultHandler(event)"/>
		<clientservice:ClientService id="clientService"
									 fault="Alert.show(event.fault.faultString + '\n' + event.fault.faultDetail)"
									 showBusyCursor="true"/>
		<s:CallResponder id="clientExistsResult" result="clientExistsResult_resultHandler(event)"/>
		<s:CallResponder id="getAssessmentsByClientIDResult" result="getAssessmentsByClientIDResult_resultHandler(event)"/>
		<assessmentservice:AssessmentService id="assessmentService"
											 fault="Alert.show(event.fault.faultString + '\n' + event.fault.faultDetail)"
											 showBusyCursor="true"/>
	</fx:Declarations>
	<s:Label y="0" fontSize="14" fontWeight="bold" horizontalCenter="0"
			 text="Create Interviews for Active Client"/>
	<s:Form id="clientIDForm" y="16" width="222" height="44" defaultButton="{saveClientIDButton}"
			fontWeight="bold" horizontalCenter="0">
		<mx:FormItem label="Client ID">
			<s:TextInput id="clientID" fontWeight="normal"/>
		</mx:FormItem>
	</s:Form>
	<s:Button id="saveClientIDButton" y="55" label="Change ID" click="saveButton_clickHandler(event)"
			  fontWeight="normal" horizontalCenter="52"/>
	
	<!--Interviews section-->
	<s:Label y="93" fontSize="14" fontWeight="bold" horizontalCenter="0" text="Interview List"/>
	<s:DataGrid id="assessmentGrid" y="116" width="289" height="189" dataProvider="{assessmentList}"
				horizontalCenter="0" requestedRowCount="3" resizableColumns="false">
		<s:columns>
			<s:ArrayList>
				<s:GridColumn dataField="type" headerText="Type" width="135" itemRenderer="components.client.assessmentGridRenderer"></s:GridColumn>
				<s:GridColumn dataField="date" headerText="Date" width="75"></s:GridColumn>
				<s:GridColumn dataField="load" headerText="Load" width="70">
					<s:itemRenderer>
						<fx:Component>
							<s:GridItemRenderer width="100%">
								<s:Button label="Load" x="7" width="55" click="{outerDocument.loadButton_clickHandler()}" />
							</s:GridItemRenderer>
						</fx:Component>
					</s:itemRenderer>
				</s:GridColumn>
			</s:ArrayList>
		</s:columns>
	</s:DataGrid>
	
	<s:Group y="317" horizontalCenter="0">
		<s:layout>
			<s:HorizontalLayout gap="15"/>
		</s:layout>
		<s:Group id="dciGroup" x="54" y="317">
			<s:layout>
				<s:VerticalLayout horizontalAlign="center"/>
			</s:layout>
			<s:Label x="53" y="313" fontWeight="bold" text="Create New DCI"/>
			<s:Button id="dciIntakeButton" x="63" y="331" label="Intake" click="createIntake(true)"/>
			<s:Button id="dciDischargeButton" x="59" y="358" label="Discharge" click="createDischarge(true)"/>
			<s:Button id="dciFollowupButton" x="62" y="385" label="Followup" click="createFollowup(true)"/>
		</s:Group>
		
		<s:Group id="gpraGroup" x="167" y="313">
			<s:layout>
				<s:VerticalLayout horizontalAlign="center"/>
			</s:layout>
			<s:Label fontWeight="bold" text="Create New GPRA"/>
			<s:Button id="gpraIntakeButton" label="Intake" click="createIntake(false)"/>
			<s:Button id="gpraDischargeButton" label="Discharge" click="createDischarge(false)"/>
			<s:Button id="gpraFollowupButton" label="Followup" click="createFollowup(false)"/>
		</s:Group>
	</s:Group>
	
</s:Group>

<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:assessmentservice="services.assessmentservice.*"
		 width="715" height="300" xmlns:valueObjects="valueObjects.*">
	<fx:Script>
		<![CDATA[
			import components.assessment.AssessType;
			import components.dci.InterviewType;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			import mx.rpc.events.ResultEvent;
			
			import spark.components.NavigatorContent;
			
			protected var global:CDPConnectFlex = FlexGlobals.topLevelApplication as CDPConnectFlex;
			[Bindable] public var assessmentList:ArrayCollection = new ArrayCollection();
			
			public function initializeGroup():void
			{
				//If episode loaded, find all assessments
				if(global.activeEpisode != null)
				{
					getAssessmentsByEpisodeIDResult.token = assessmentService.getAssessmentsByEpisodeID(global.activeEpisode.autoid);
					enabled = true;
				}
				else //episode list is empty
				{
					assessmentList.removeAll();
					enabled = false;
				}
				
				global.rulesManager.initAssessments();
			}
			
			/**
			 * Populate assessments list
			 * Record the existance of each type of DCIs.
			 * Get intake DCI data if it exists.
			 * */
			protected function getAssessmentsByEpisodeIDResult_resultHandler(event:ResultEvent):void
			{
				assessmentList = getAssessmentsByEpisodeIDResult.lastResult;
				
				//Pull out and identify any DCI intake/discharge/followup
				global.pageDCI.intakeExists = false;
				global.pageDCI.dischargeExists = false;
				global.pageDCI.followupExists = false;
				global.pageDCI.intakeDCI = null;
				
				for each(var assess:AssessmentVO in assessmentList)
				{
					if(assess.type == AssessType.DCI)
					{
						if([InterviewType.INTAKE_GENERAL,InterviewType.INTAKE_SBIRT_BI,InterviewType.INTAKE_SBIRT_NEG,InterviewType.INTAKE_SBIRT_RT].indexOf(assess.subtype) > 0)
						{
							global.pageDCI.intakeExists = true;
							global.pageDCI.intakeDCI = assess;
						}
						else if([InterviewType.DISCHARGE,InterviewType.DISCHARGE_NO_INTERVIEW].indexOf(assess.subtype) > 0)
							global.pageDCI.dischargeExists = true;
						else if([InterviewType.FOLLOWUP,InterviewType.FOLLOWUP_SBIRT_BI].indexOf(assess.subtype) > 0)
							global.pageDCI.followupExists = true;
					}
				}
				
				global.rulesManager.loadAssessments();
			}
			
			/**
			 * Load Screening Assessments
			 * */
			public function loadButton_clickHandler():void
			{
				global.activeAssessment = assessmentGrid.selectedItem as AssessmentVO;
				
				if(global.activeAssessment.type == AssessType.DCI)
				{
					global.enableLeftButtonsOnly(global.pageDCIButton);
					global.pageDCI.initializePage(global.activeAssessment.subtype);
					global.pageViewstack.selectedChild = global.pageDCI;
				}
				else
				{
					global.enableLeftButtonsOnly(global.pageAssessButton);
					global.pageAssessment.initAssessment(global.activeAssessment.type);
					global.pageViewstack.selectedChild = global.pageAssessment;
				}
			}
			
			protected function getAssessmentDataResult_resultHandler(event:ResultEvent):void
			{
				global.activeAssessment.data = getAssessmentDataResult.lastResult;
				if(global.activeAssessment.type == AssessType.DCI)
				{
					global.enableLeftButtonsOnly(global.pageDCIButton);
					global.pageDCI.initializePage(global.activeAssessment.subtype);
					global.pageViewstack.selectedChild = global.pageDCI;
				}
				else
				{
					global.enableLeftButtonsOnly(global.pageAssessButton);
					global.pageAssessment.initAssessment(global.activeAssessment.type);
					global.pageViewstack.selectedChild = global.pageAssessment;
				}
			}
			
			/**
			 * Create Screening Assessments
			 * */
			public function createAssessment(type:int):void
			{
				global.enableLeftButtonsOnly(global.pageAssessButton);
				global.activeAssessment = null;
				global.pageAssessment.initAssessment(type);
				global.pageViewstack.selectedChild = global.pageAssessment;
			}
			
			protected function prescreenButton_clickHandler(event:MouseEvent):void
			{
				createAssessment(AssessType.PRESCREEN);
			}
			protected function auditButton_clickHandler(event:MouseEvent):void
			{
				createAssessment(AssessType.AUDIT);
			}			
			protected function dast10Button_clickHandler(event:MouseEvent):void
			{
				createAssessment(AssessType.DAST10);
			}			
			protected function phq9Button_clickHandler(event:MouseEvent):void
			{
				createAssessment(AssessType.PHQ9);
			}
			
			/**
			 * Create DCI Interviews
			 * */
			public function createDCI(subtype:int):void
			{
				//Check that this type of interview doesn't already exist
				if((global.pageDCI.isIntake(subtype) && global.pageDCI.intakeExists) || (global.pageDCI.isDischarge(subtype) && global.pageDCI.dischargeExists) || (global.pageDCI.isFollowup(subtype) && global.pageDCI.followupExists))
				{
					Alert.show("This type of DCI assessment has already been created.");
				}
				//Check that an Intake exists before creating a discharge or followup
				else if((global.pageDCI.isDischarge(subtype) || global.pageDCI.isFollowup(subtype)) && !global.pageDCI.intakeExists)
				{
					Alert.show("You must create an Intake DCI before creating a Discharge or Follow-up.");
				}
				else
				{
					global.enableLeftButtonsOnly(global.pageDCIButton);
					global.activeAssessment = null;
					
					global.pageDCI.initializePage(subtype);
					global.pageViewstack.selectedChild = global.pageDCI;
					global.rulesManager.createDCI();
				}
			}
			
			protected function intakeGeneralButton_clickHandler(event:MouseEvent):void
			{
				createDCI(InterviewType.INTAKE_GENERAL);
			}			
			protected function sbirtIntakeRTButton_clickHandler(event:MouseEvent):void
			{
				createDCI(InterviewType.INTAKE_SBIRT_RT);
			}
			protected function sbirtIntakeNegativeButton_clickHandler(event:MouseEvent):void
			{
				createDCI(InterviewType.INTAKE_SBIRT_NEG);
			}
			protected function sbirtIntakeBIButton_clickHandler(event:MouseEvent):void
			{
				createDCI(InterviewType.INTAKE_SBIRT_BI);
			}			
			protected function dischargeGeneralButton_clickHandler(event:MouseEvent):void
			{
				createDCI(InterviewType.DISCHARGE);
			}			
			protected function dischargeNoInterviewButton_clickHandler(event:MouseEvent):void
			{
				createDCI(InterviewType.DISCHARGE_NO_INTERVIEW);
			}			
			protected function followupGeneralButton_clickHandler(event:MouseEvent):void
			{
				createDCI(InterviewType.FOLLOWUP);
			}			
			protected function sbirtFollowupButton_clickHandler(event:MouseEvent):void
			{
				createDCI(InterviewType.FOLLOWUP_SBIRT_BI);
			}	

			
		]]>
	</fx:Script>
	<fx:Declarations>
		<s:CallResponder id="getAssessmentsByEpisodeIDResult" result="getAssessmentsByEpisodeIDResult_resultHandler(event)"/>
		<assessmentservice:AssessmentService id="assessmentService"
											 fault="Alert.show(event.fault.faultString + '\n' + event.fault.faultDetail)"
											 showBusyCursor="true"/>
		<s:CallResponder id="getAssessmentDataResult" result="getAssessmentDataResult_resultHandler(event)"/>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<s:Label x="102" y="17" fontWeight="bold" text="Assessments List"/>
	<s:DataGrid id="assessmentGrid" x="9" y="40" width="289" height="189"
				dataProvider="{assessmentList}" itemRenderer="components.client.assessmentGridRenderer"
				requestedRowCount="3" resizableColumns="false">
		<s:columns>
			<s:ArrayList>
				<s:GridColumn dataField="type" headerText="Type" width="135"></s:GridColumn>
				<s:GridColumn dataField="date" headerText="Date" width="75"></s:GridColumn>
				<!--<s:GridColumn dataField="complete" headerText="Done" width="45"></s:GridColumn>-->
				<s:GridColumn dataField="load" headerText="Load" width="60">
					<s:itemRenderer>
						<fx:Component>
							<s:GridItemRenderer width="100%">
								<s:Button label="Load" x="7" width="55" click="{outerDocument.loadButton_clickHandler()}" />
							</s:GridItemRenderer>
						</fx:Component>
					</s:itemRenderer>
				</s:GridColumn>
			</s:ArrayList>
		</s:columns>
		<s:typicalItem>
			<valueObjects:AssessmentVO type="1" subtype="0" complete="1" autoid="0" episode_autoid="0" date="01/01/1900"/>
		</s:typicalItem>
	</s:DataGrid>
	
	<mx:VRule x="302" y="1" width="14" height="231"/>
	<s:Label x="328" y="18" fontWeight="bold" text="Screening"/>
	<s:Button id="prescreenButton" x="318" y="40" label="Prescreen" click="prescreenButton_clickHandler(event)"/>
	<s:Button id="auditButton" x="320" y="79" label="AUDIT" click="auditButton_clickHandler(event)"/>
	<s:Button id="dast10Button" x="320" y="118" label="DAST-10" click="dast10Button_clickHandler(event)"/>
	<s:Button id="phq9Button" x="320" y="158" label="PHQ9" click="phq9Button_clickHandler(event)"/>
	
	<mx:VRule x="398" y="0" width="14" height="231"/>
	<s:Label x="433" y="15" fontWeight="bold" text="DCI Intake"/>
	<s:Button id="intakeGeneralButton" x="426" y="40" label="General" click="intakeGeneralButton_clickHandler(event)"/>
	<s:Button id="sbirtIntakeRTButton" x="412" y="158" label="SBIRT - BT/RT" click="sbirtIntakeRTButton_clickHandler(event)"/>
	<s:Button id="sbirtIntakeNegativeButton" x="418" y="77" label="SBIRT - Neg" click="sbirtIntakeNegativeButton_clickHandler(event)"/>
	<s:Button id="sbirtIntakeBIButton" x="423" y="117" label="SBIRT - BI" click="sbirtIntakeBIButton_clickHandler(event)"/>
	
	<mx:VRule x="513" y="0" width="14" height="231"/>
	<s:Label x="533" y="14" fontWeight="bold" text="DCI Discharge"/>
	<s:Button id="dischargeGeneralButton" x="536" y="42" label="General" click="dischargeGeneralButton_clickHandler(event)"/>
	<s:Button id="dischargeNoInterviewButton" x="528" y="78" label="No Interview" click="dischargeNoInterviewButton_clickHandler(event)"/>
	
	<mx:VRule x="617" y="0" width="14" height="231"/>
	<s:Label x="634" y="15" fontWeight="bold" text="DCI Followup"/>
	<s:Button id="followupGeneralButton" x="633" y="42" label="General" click="followupGeneralButton_clickHandler(event)"/>
	<s:Button id="sbirtFollowupButton" x="631" y="78" label="SBIRT - BI" click="sbirtFollowupButton_clickHandler(event)"/>
</s:Group>

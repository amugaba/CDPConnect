<?xml version="1.0" encoding="utf-8"?>
<assessment:InterviewForm xmlns:fx="http://ns.adobe.com/mxml/2009" 
			 xmlns:s="library://ns.adobe.com/flex/spark" 
			 xmlns:mx="library://ns.adobe.com/flex/mx" width="100%" height="100%" xmlns:assessment="components.assessment.*">
	<fx:Script>
		<![CDATA[
			import components.questions.QuestionList;
			import components.questions.QuestionText;
			import components.questions.QuestionTextRefusable;
			import components.validators.Valid;
			
			import mx.binding.utils.BindingUtils;
			import mx.collections.ArrayList;
			import mx.validators.NumberValidator;
			
			public var qAttendVoluntary:QuestionList = new QuestionList("AttendVoluntary","If yes, specify how many times",ynrd,1);
			public var qAttendVoluntaryTimes:QuestionTextRefusable = new QuestionTextRefusable("AttendVoluntaryTimes","","0");
			public var qAttendReligious:QuestionList = new QuestionList("AttendReligious","If yes, specify how many times",ynrd,1);
			public var qAttendReligiousTimes:QuestionTextRefusable = new QuestionTextRefusable("AttendReligiousTimes","","0");
			public var qAttendOtherOrg:QuestionList = new QuestionList("AttendOtherOrg","If yes, specify how many times",ynrd,1);
			public var qAttendOtherOrgTimes:QuestionTextRefusable = new QuestionTextRefusable("AttendOtherOrgTimes","","0");
			
			public var qInteractFamilyFriends:QuestionList = new QuestionList("InteractFamilyFriends","In the past 30 days, did you have interaction with family and/or friends that are supportive of your recovery?",ynrd,1);
			public var qWhomInTrouble:QuestionList = new QuestionList("WhomInTrouble","To whom do you turn when you are having trouble?",new ArrayList(["No One","Clergy Member","Family Member","Friends","Other",REFUSED_VALUE,DONT_KNOW_VALUE]),0);
			public var qWhomInTroubleSpec:QuestionText = new QuestionText("WhomInTroubleSpec","Other, specify:","");
			
			//Social Form Area
			public override function createForm():void
			{
				//Questions
				createText("In the past 30 days, have you attended any voluntary self-help groups for recovery that were not affiliated with a religious or faith-based organization?","h1",590);
				createText("In other words, did you participate in a non-professional, peer-operated organization that is devoted to helping individuals who have addiction related problems such as: Alcoholics Anonymous, Narcotics Anonymous, Oxford House, Secular Organization for Sobriety, or Women for Sobriety, etc.","",590);
				addSocialQuestion(qAttendVoluntary,qAttendVoluntaryTimes);
				
				createText("In the past 30 days, did you attend any religious/faith-affiliated recovery self-help groups?","h1",590);
				addSocialQuestion(qAttendReligious,qAttendReligiousTimes);
				
				createText("In the past 30 days, did you attend meetings of organizations that support recovery other than the organizations described above?","h1",590);
				addSocialQuestion(qAttendOtherOrg,qAttendOtherOrgTimes);
				
				addDivider();
				addQuestion(qInteractFamilyFriends);
				addQuestion(qWhomInTrouble,150);
				addQuestion(qWhomInTroubleSpec);
				
				//Validators
				Valid.addRequiredValidator(qWhomInTroubleSpec);
				qWhomInTroubleSpec.answerType = String;
				
				//Control Logic
				addSkipDropDown(qWhomInTrouble,["Other"],[qWhomInTroubleSpec],true);				
			}
			
			protected function addSocialQuestion(socialQ:QuestionList, daysQ:QuestionTextRefusable):void
			{
				addQuestion(socialQ);
				socialQ.inputControl.width = 90;
				socialQ.direction = "horizontal";
				
				questions.push(daysQ);
				socialQ.addElement(daysQ.input);
				socialQ.addElement(daysQ.refuseInput);
				daysQ.inline = true;
				
				Valid.addNumberValidator(daysQ,1,30,true);
				addSkipDropDown(socialQ,["Yes"],[daysQ],true);
			}
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
</assessment:InterviewForm>

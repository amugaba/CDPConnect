<?xml version="1.0" encoding="utf-8"?>
<s:NavigatorContent xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:custom="components.*"
		 xmlns:gpraservice="services.gpraservice.*"
		 xmlns:styles="com.adobe.fiber.styles.*"
		 xmlns:clientservice="services.clientservice.*"
		 width="400" height="300" xmlns:dci="components.dci.*">
	<fx:Script>
		<![CDATA[
			import com.adobe.serializers.utility.TypeUtility;
			
			import components.DateAgeValidator;
			import components.QuestionClass;
			import components.QuestionList;
			import components.QuestionText;
			import components.QuestionTextRefusable;
			import components.SkipMultipleHandler;
			import components.SkipPattern;
			import components.SkipPatternMultiple;
			import components.SkipPatternRange;
			import components.dci.DCIForm;
			
			import flash.globalization.DateTimeFormatter;
			import flash.globalization.LocaleID;
			
			import mx.binding.utils.BindingUtils;
			import mx.collections.ArrayCollection;
			import mx.collections.ArrayList;
			import mx.controls.Alert;
			import mx.controls.DateField;
			import mx.controls.Label;
			import mx.controls.Text;
			import mx.controls.buttonBarClasses.ButtonBarButton;
			import mx.core.FlexGlobals;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.events.ValidationResultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.utils.ArrayUtil;
			import mx.validators.DateValidator;
			import mx.validators.NumberValidator;
			import mx.validators.StringValidator;
			import mx.validators.ValidationResult;
			import mx.validators.Validator;
			
			import spark.components.DropDownList;
			import spark.components.FormHeading;
			import spark.components.FormItem;
			import spark.components.RichText;
			import spark.components.TextArea;
			import spark.components.TextInput;
			import spark.events.DropDownEvent;
			import spark.events.IndexChangeEvent;
			import spark.validators.CurrencyValidator;
			
			import valueObjects.ClientVO;
			import valueObjects.GpraVO;
			
			protected var questionDict:Dictionary = new Dictionary();
			protected var dateFormatter:DateTimeFormatter = new DateTimeFormatter(LocaleID.DEFAULT);
			
			
			protected var ynrdm:ArrayList = new ArrayList(["Yes","No","Refused","Don't Know","Missing Data"]);
			protected var ynrm:ArrayList = new ArrayList(["Yes","No","Refused","Missing Data"]);
			protected var rdm:ArrayList = new ArrayList(["Refused","Don't Know","Missing Data"]);
			protected var gpraConstructed:Boolean = false;
			protected var global:CDPConnectFlex = FlexGlobals.topLevelApplication as CDPConnectFlex;
			protected var ethnicCount:int = 0;
			protected var dciForms:Array;
			
			public function creationCompleteHandler():void
			{
			}
			
			protected function resetGPRA():void
			{
				for each(var form:DCIForm in dciForms)
				{
					form.reset();
				}
			}
			
			public function initializeGPRA():void
			{
				if(!gpraConstructed)
				{
					gpraConstructed = true;
					dateFormatter.setDateTimePattern("MM/dd/yyyy");
					
					recordForm.createForm();
					sbirtForm.createForm();
					demoForm.createForm();
					demo2Form.createForm();
					military1Form.createForm();
					military2Form.createForm();
					drugForm.createForm();
					livingForm.createForm();
					employmentForm.createForm();
					crimeForm.createForm();
					health1Form.createForm();
					health2Form.createForm();
					health3Form.createForm();
					health4Form.createForm();
					socialForm.createForm();
					followupForm.createForm();
					dischargeForm.createForm();
					
					dciForms = new Array([recordForm,demoForm,military1Form,military2Form,drugForm,livingForm,employmentForm,crimeForm,health1Form,health2Form,health3Form,health4Form,socialForm,followupForm,dischargeForm]);
				}
				else
				{
					resetGPRA();
				}
				
				if(global.activeGPRA.type == 1)
				{
					enableFollowup(false);
					enableDischarge(false);
					enableSectionA(true);
				}
				else if(global.activeGPRA.type == 2)
				{
					enableFollowup(true);
					enableDischarge(false);
					enableSectionA(false);
				}
				else if(global.activeGPRA.type == 5)
				{
					enableFollowup(false);
					enableDischarge(true);
					enableSectionA(false);
				}
				
				//if GPRA has already been finalized, it cannot be changed
				/*if(global.activeGPRA.status == 1)
				{
					if(viewStack.contains(saveTab))
						viewStack.removeChild(saveTab);
				}
				else
				{
					if(!viewStack.contains(saveTab))
						viewStack.addChildAt(saveTab,viewStack.numChildren);
				}*/
				
				recordForm.qClientID.answer = String(global.activeClient.autoid);
				recordForm.qInterviewTypeCode.input.selectedIndex = global.activeGPRA.type-1;
				recordForm.qInterviewDate.answer = dateFormatter.format(new Date());
				//validateGPRA();
				viewStack.selectedChild = recordTab;
			}
			
			protected function enableSectionA(enabled:Boolean):void
			{
				if(enabled)
				{
					if(!viewStack.contains(demoTab))
						viewStack.addChildAt(demoTab,viewStack.getChildIndex(recordTab)+1);
					if(!viewStack.contains(military1Tab))
						viewStack.addChildAt(military1Tab,viewStack.getChildIndex(demoTab)+1);
					if(!viewStack.contains(military2Tab))
						viewStack.addChildAt(military2Tab,viewStack.getChildIndex(military1Tab)+1);
					var dv:DateAgeValidator = recordForm.qInterviewDate.validator as DateAgeValidator;
					dv.max = 365;
				}
				else
				{
					if(viewStack.contains(demoTab))
						viewStack.removeChild(demoTab);
					if(viewStack.contains(military1Tab))
						viewStack.removeChild(military1Tab);
					if(viewStack.contains(military2Tab))
						viewStack.removeChild(military2Tab);
				}
				recordForm.qCooccurringScreen.visible = enabled;
				recordForm.qCooccurringScreenStatus.visible = enabled;
				recordForm.qConductedInterview.enabled = !enabled;
				demoForm.qDateOfBirth.validator.enabled = enabled;
			}
			
			protected function enableFollowup(enabled:Boolean):void
			{
				if(enabled)
				{
					if(!viewStack.contains(followupTab))
						viewStack.addChildAt(followupTab,viewStack.getChildIndex(socialTab)+1);
					if(global.activeClient.intake.data.source["GenderCode"] != 1)
						livingForm.qPregnant.enable();
					var dv:DateAgeValidator = recordForm.qInterviewDate.validator as DateAgeValidator;
					dv.max = (new Date().time - DateField.stringToDate(global.activeClient.intake.date,"MM/DD/YYYY").time) / 1000 / 60 / 60 / 24;
				}
				else
				{
					if(viewStack.contains(followupTab))
						viewStack.removeChild(followupTab);
				}
			}
			
			protected function enableDischarge(enabled:Boolean):void
			{
				if(enabled)
				{
					if(!viewStack.contains(dischargeTab))
						viewStack.addChildAt(dischargeTab,viewStack.getChildIndex(socialTab)+1);
					if(global.activeClient.intake.data.source["GenderCode"] != 1)
						livingForm.qPregnant.enable();
					var dv:DateAgeValidator = recordForm.qInterviewDate.validator as DateAgeValidator;
					dv.max = 1 + (new Date().time - DateField.stringToDate(global.activeClient.intake.date,"MM/DD/YYYY").time) / 1000 / 60 / 60 / 24;
				}
				else
				{
					if(viewStack.contains(dischargeTab))
						viewStack.removeChild(dischargeTab);
				}
				dischargeForm.qDischargeDate.validator.enabled = enabled;
			}
			
			
			//Read GPRAVO, populate forms
			public function populateForm(gpra:ArrayCollection):void
			{
				var gpraVO:Array = gpra.source;
				var answer:String;
				var answerNum:Number;
				for each(var q:QuestionClass in questionDict)
				{
					if(["ServiceMemRelationship","ServiceMemExpOther","ServiceMemExpDeployed","ServiceMemExpInjured","ServiceMemExpCombatStress","ServiceMemExpDeceased"].indexOf(q.codeName) != -1)
						continue;
					answer = gpraVO[q.codeName];
					answerNum = parseInt(answer);
					if(q is QuestionTextRefusable)
					{
						var qr:QuestionTextRefusable = q as QuestionTextRefusable;
						if(answerNum == -1)
							q.disable(); //question is being skipped, put -1 for N/A, this may not be necessary
						else if(answerNum < -6)
							qr.refuseInput.selectedIndex = -6 - answerNum; //put -7 for Refused, -8 for DK, -9 for MI
						else
						{
							q.answer = answer;
							qr.refuseInput.selectedIndex = 0;
						}
						qr.refusedHandler(null);
					}
					else if(q is QuestionText)
					{
						if(answerNum == -1)
							q.disable(); //question is being skipped, put -1 for N/A
						else
							q.answer = answer;
					}
					else if(q is QuestionList)
					{
						var ql:QuestionList = q as QuestionList;
						if(ql.input.dataProvider.getItemAt(0) == "Yes" && ql.input.dataProvider.getItemAt(1) == "No")
						{
							if(answerNum == 1)
								q.answer = "Yes";
							else if(answerNum == 0)
								q.answer = "No";
						}
						/*else if(["MilitaryServed","ActiveDuty","FamilyActiveDuty","EducationYears","PhysicallyHurt"].indexOf(q.codeName) != -1)
						{
							ql.input.selectedIndex = answerNum; //These codes count up from 0
						}
						else if(q.codeName == "EmployStatus" && answerNum == 0)
						{
							q.answer = "Other";
						}*/
						else if(answerNum > 0)
							ql.input.selectedIndex = answerNum - 1;
						
						if(answerNum == -1)
							q.disable();
						else if(answerNum == -7)
							q.answer = "Refused";
						else if(answerNum == -8)
							q.answer = "Don't Know";
						else if(answerNum == -9)
							q.answer = "Missing Data";	
					}
					for each(var skip:SkipPattern in q.skipPatterns)
						skip.skipHandler(null);
				}
				
				for each(var q2:QuestionClass in questionDict)
				if(q2.validator != null)
					if(!q2.isSkipped && q2.inputControl.enabled)
						q2.validator.validate();
				
				military2Form.familyVeterans = new ArrayList();
				for(var i:Number = 1; i<=6; i++)
				{
					var num:Number = Number(gpraVO["ServiceMemRelationship"+String(i)]);
					if(num > 0)
					{
						var arr:Array = new Array();
						if(num == -9)
							arr.push("Missing Data");
						else
							arr.push(military2Form.qServiceMemRelationship.input.dataProvider.getItemAt(num -1));
						arr.push(gpraVO["ServiceMemExpOther"+String(i)]);
						
						num = gpraVO["ServiceMemExpDeployed"+String(i)];
						if(num == 1)
							arr.push("Yes");
						else if(num == 0)
							arr.push("No");
						else
							arr.push(military2Form.qServiceMemExpDeployed.input.dataProvider.getItemAt(-5 - num));
						
						num = gpraVO["ServiceMemExpInjured"+String(i)];
						if(num == 1)
							arr.push("Yes");
						else if(num == 0)
							arr.push("No");
						else
							arr.push(military2Form.qServiceMemExpInjured.input.dataProvider.getItemAt(-5 - num));
						
						num = gpraVO["ServiceMemExpCombatStress"+String(i)];
						if(num == 1)
							arr.push("Yes");
						else if(num == 0)
							arr.push("No");
						else
							arr.push(military2Form.qServiceMemExpCombatStress.input.dataProvider.getItemAt(-5 - num));
						
						num = gpraVO["ServiceMemExpDeceased"+String(i)];
						if(num == 1)
							arr.push("Yes");
						else if(num == 0)
							arr.push("No");
						else
							arr.push(military2Form.qServiceMemExpDeceased.input.dataProvider.getItemAt(-5 - num));
						
						military2Form.familyVeterans.addItem(arr);
					}
				}
				military2Form.updateFamilyValidator();
			}
			
			//Parse Form Data, construct GPRAVO
			protected function parseForm():void
			{
				var gpraData:Array = new Array();
				var answer:Object;
				var date:Date = DateField.stringToDate(recordForm.qInterviewDate.answer,"MM/DD/YYYY");
				for each(var q:QuestionClass in questionDict)
				{
					if(q.parent == followupForm && recordForm.qInterviewTypeCode.answer != "6 Month Followup")
						continue;
					if(q.parent == dischargeForm && recordForm.qInterviewTypeCode.answer != "Discharge")
						continue;
					if(["ServiceMemRelationship","ServiceMemExpOther","ServiceMemExpDeployed","ServiceMemExpInjured","ServiceMemExpCombatStress","ServiceMemExpDeceased"].indexOf(q.codeName) != -1)
						continue;
					if(q is QuestionTextRefusable)
					{
						var qr:QuestionTextRefusable = q as QuestionTextRefusable;
						if(qr.refuseInput.selectedIndex > 0)
							answer = -6 - qr.refuseInput.selectedIndex; //put -7 for Refused, -8 for DK, -9 for MI
						else if(q.isSkipped)
							answer = -1; //question is being skipped, put -1 for N/A
						else
							answer = Number(qr.answer);
						/*if(q.codeName == "ArrestedDrugDays")
						{
							if((getQuestion("ArrestedDays") as QuestionTextRefusable).refuseInput.selectedIndex > 0)
								answer = 0;
						}*/
					}
					else if(q is QuestionText)
					{
						if(q.isSkipped)
						{
							//answer = -1; //question is being skipped, put -1 for N/A
							answer = null;
						}
						else
							answer = q.answer;
					}
					else if(q is QuestionList)
					{
						var ql:QuestionList = q as QuestionList;
						answer = ql.input.selectedIndex + 1;
						if(ql.input.dataProvider.getItemAt(0) == "Yes" && ql.input.dataProvider.getItemAt(1) == "No")
						{
							if(q.answer == "Yes")
								answer = 1;
							else if(q.answer == "No")
								answer = 0;
						}
							
						
						if(q.isSkipped)
							answer = -1;
						else if(q.answer == "Refused")
							answer = -7;
						else if(q.answer == "Don't Know")
							answer = -8;
						else if(q.answer == "Missing Data")
							answer = -9;
						
						//Special codes
						/*if(["MilitaryServed","ActiveDuty","FamilyActiveDuty","EducationYears","PhysicallyHurt"].indexOf(q.codeName) != -1)
						{
							answer = ql.input.selectedIndex; //These codes count up from 0
						}
						else if(q.codeName == "EmployStatus" && q.answer == "Other")
						{
							answer = 0;
						}
						else if(["IraqAfghanistan","PersianGulf","VietnamSoutheastAsia","Korea","WWII","DeployedCombatZone"].indexOf(q.codeName) != -1)
						{
							var nDep:String = getQuestion("NeverDeployed").answer;
							if(nDep == "No")
								answer = 0;
							else if(nDep == "Refused")
								answer = -7;
							else if(nDep == "Don't Know")
								answer = -8;
							else if(nDep == "Missing Data")
								answer = -9;
						}
						else if(["ImpactStress","ImpactActivity","ImpactEmotional"].indexOf(q.codeName) != -1 && q.isSkipped)
						{
							answer = 5; //These use 5 for Not Applicable
						}
						else if(q.codeName == "FLWPStatus")
						{
							if(answer == 2)
								answer = 11;
							else if(answer == 3)
								answer = 12;
							else if(answer == 4)
								answer = 21; 
							else if(answer == 5)
								answer = 22; 
							else if(answer == 6)
								answer = 23; 
							else if(answer == 7)
								answer = 24; 
							else if(answer == 8)
								answer = 31; 
							else if(answer == 9)
								answer = 32; 
						}*/
					}
					/*if(q.codeName == "DateOfBirth")
					{
						var bday:Date = DateField.stringToDate(q.answer,"MM/DD/YYYY");
						if(bday != null)
						{
							gpraData["BirthYear"] = bday.fullYear;
							gpraData["BirthMonth"] = bday.month + 1;
							var age:Number = Math.floor((date.time - bday.time) / 1000 / 60 / 60 / 24 / 365);
							gpraData["Age"] = age;
							if(age > 9 && age < 13)
								gpraData["AgeGroup"] = 0;
							else if(age < 18)
								gpraData["AgeGroup"] = 1;
							else if(age < 25)
								gpraData["AgeGroup"] = 2;
							else if(age < 35)
								gpraData["AgeGroup"] = 3;
							else if(age < 45)
								gpraData["AgeGroup"] = 4;
							else if(age < 55)
								gpraData["AgeGroup"] = 5;
							else if(age < 65)
								gpraData["AgeGroup"] = 6;
							else
								gpraData["AgeGroup"] = 7;
						}
					}*/
					if(answer != null)
						gpraData[q.codeName] = answer;
				}
				//Add in other fields
				var leadingZeroes:String = "";//SAIS ID has to be 12 characters
				for(var z:int = String(global.activeClient.autoid).length; z < 12; z++)
					leadingZeroes += "0";
				gpraData["ClientID"] = global.activeClient.autoid;
				gpraData["SAISID"] = leadingZeroes + String(global.activeClient.autoid);
				gpraData["GrantNo"] = "TI024261";
				//gpraData["InterviewSeqNum"] = 1;//this is based on episode # for SBIRT
				//gpraData["GrantInactFlag"] = 0;
				//gpraData["InactFlag"] = 0;//once discharge and followup are done, this should be 1
				//gpraData["gpra_status"] = finalized ? 1: 0;
				//gpraData["Veteran"] = -99;
				//if(gpraData["CooccurringScreen"] == -9)
				//	gpraData["CooccurringScreenStatus"] = -9;
				/*if(gpraData["InterviewTypeCode"] == 1)
					gpraData["IntakeDate"] = gpraData["InterviewDate"];//this is only true if interviewtypecode == 1, have to get it from the db
				else
				{
					for each(var g:GpraVO in global.activeClient.gpras)
					{
						if(g.type == 1)
							gpraData["IntakeDate"] = g.date;
					}
				}
				gpraData["InterviewCreateDate"] = dateFormatter.format(new Date());//is this done by SAIS?
				*/
				/*if(date != null)
				{
					var month:Number = date.month+1;
					gpraData["Month"] = month;
					if(month > 9)
						gpraData["FFY"] = date.fullYear+1;
					else
						gpraData["FFY"] = date.fullYear;
					if(month > 9)
						gpraData["Quarter"] = 1;
					else if(month > 6)
						gpraData["Quarter"] = 4; 
					else if(month > 3)
						gpraData["Quarter"] = 3; 
					else
						gpraData["Quarter"] = 2;
				}
				
				if(gpraData["EmployStatus"] > 0 && gpraData["EmployStatus"] < 3)
					gpraData["Employment"] = 1;
				else if(gpraData["EmployStatus"] > 2)
					gpraData["Employment"] = 2;
				else if(gpraData["EmployStatus"] < 0)
					gpraData["Employment"] = -9;
				*/
				var i:Number = 1;
				for each(var arr:Array in military2Form.familyVeterans.source)
				{
					if(arr[0] == "Missing Data")
						gpraData["ServiceMemRelationship"+String(i)] = -9;
					else
						gpraData["ServiceMemRelationship"+String(i)] = military2Form.qServiceMemRelationship.input.dataProvider.getItemIndex(arr[0])+1;
					if(gpraData["ServiceMemRelationship"+String(i)] == 8)
					//if(arr[1] == "")
					//	gpraData["ServiceMemExpOther"+String(i)] = null;
					//else
						gpraData["ServiceMemExpOther"+String(i)] = arr[1];
					if(arr[2] == "Yes")
						gpraData["ServiceMemExpDeployed"+String(i)] = 1;
					else if(arr[2] == "No")
						gpraData["ServiceMemExpDeployed"+String(i)] = 0;
					else
						gpraData["ServiceMemExpDeployed"+String(i)] = -5 - military2Form.qServiceMemExpDeployed.input.dataProvider.getItemIndex(arr[2]);
					if(arr[3] == "Yes")
						gpraData["ServiceMemExpInjured"+String(i)] = 1;
					else if(arr[3] == "No")
						gpraData["ServiceMemExpInjured"+String(i)] = 0;
					else
						gpraData["ServiceMemExpInjured"+String(i)] = -5 - military2Form.qServiceMemExpDeployed.input.dataProvider.getItemIndex(arr[3]);
					if(arr[4] == "Yes")
						gpraData["ServiceMemExpCombatStress"+String(i)] = 1;
					else if(arr[4] == "No")
						gpraData["ServiceMemExpCombatStress"+String(i)] = 0;
					else
						gpraData["ServiceMemExpCombatStress"+String(i)] = -5 - military2Form.qServiceMemExpDeployed.input.dataProvider.getItemIndex(arr[4]);
					if(arr[5] == "Yes")
						gpraData["ServiceMemExpDeceased"+String(i)] = 1;
					else if(arr[5] == "No")
						gpraData["ServiceMemExpDeceased"+String(i)] = 0;
					else
						gpraData["ServiceMemExpDeceased"+String(i)] = -5 - military2Form.qServiceMemExpDeployed.input.dataProvider.getItemIndex(arr[5]);
					i += 1;
				}
				for(i; i<=6; i++)
				{
					gpraData["ServiceMemRelationship"+String(i)] = -1;
					//gpraData["ServiceMemExpOther"+String(i)] = -1;
					gpraData["ServiceMemExpDeployed"+String(i)] = -1;
					gpraData["ServiceMemExpInjured"+String(i)] = -1;
					gpraData["ServiceMemExpCombatStress"+String(i)] = -1;
					gpraData["ServiceMemExpDeceased"+String(i)] = -1;
				}
				//If doing discharge or followup, get gender from the intake
				if(global.activeGPRA.type != 1)
					gpraData["GenderCode"] = global.activeClient.intake.data.source["GenderCode"];
				addServicesCodes(gpraData);
				//setNullValues(gpraData);
				global.activeGPRA.data = gpraData;
				saveGpraResult.token = gpraService.saveGpra(global.activeGPRA);
			}
			
			protected function setNullValues(gpraData:Array):void
			{
				if(gpraData["InterviewTypeCode"] == 1)
					delete gpraData["ConductedInterview"];
				if(gpraData["ConductedInterview"] == 0)
					delete gpraData["InterviewDate"];
				/*if(gpraData["InterviewTypeCode"] != 2)
				{
					gpraData.
					gpraData["FLWPStatus"] = null;
					gpraData["FLWPStatusSpec"] = null;
					gpraData["ReceivingServices"] = null;
				}
				if(gpraData["InterviewTypeCode"] != 5)
				{
					gpraData["DischargeDate"] = null;
					gpraData["DischargeStatusCompl"] = null;
					gpraData["DischargeStatusTermReason"] = null;
					gpraData["OtherDischargeStatTermRsnSpec"] = null;
					gpraData["jHIVTest"] = null;
					gpraData["jHIVTestResult"] = null;
				}*/
			}
			
			protected function addServicesCodes(gpraData:Array):void
			{
				gpraData["SvcAfterCare"] = 0;
				gpraData["SvcAlcoholDrugTesting"] = 0;
				gpraData["SvcAmbulatoryDetox"] = 0;
				gpraData["SvcAssessment"] = 0;
				gpraData["SvcBriefIntervention"] = 0;
				gpraData["SvcBriefTreatment"] = 1;
				gpraData["SvcCaseManagement"] = 0;
				gpraData["SvcChildCare"] = 0;
				gpraData["SvcCoOccurring"] = 0;
				gpraData["SvcContinuingCare"] = 0;
				gpraData["SvcDayTreatment"] = 0;
				gpraData["SvcDrugFreeHousing"] = 0;
				gpraData["SvcDrugFreeSocial"] = 0;
				gpraData["SvcEmploymentCoaching"] = 0;
				gpraData["SvcFamilyMarriageCouns"] = 0;
				gpraData["SvcFamilyServices"] = 0;
				gpraData["SvcFreeStandingRes"] = 0;
				gpraData["SvcGroupCouns"] = 0;
				gpraData["SvcHIVAIDSCouns"] = 0;
				gpraData["SvcHIVAIDSEdu"] = 0;
				gpraData["SvcHIVAIDSMedical"] = 0;
				gpraData["SvcHIVAIDSServices"] = 0;
				gpraData["SvcHospitalInpatient"] = 0;
				gpraData["SvcHousingSupport"] = 0;
				gpraData["SvcIndividualCoord"] = 0;
				gpraData["SvcIndividualCouns"] = 0;
				gpraData["SvcInformationReferral"] = 0;
				gpraData["SvcInpatient"] = 0;
				gpraData["SvcIntensiveOutpatient"] = 0;
				gpraData["SvcMedicalCare"] = 0;
				gpraData["SvcMethadone"] = 0;
				gpraData["SvcOtherAfterCare"] = 0;
				//gpraData["SvcOtherAfterCareSpec"] = -1;
				gpraData["SvcOtherCaseMgmt"] = 0;
				//gpraData["SvcOtherCaseMgmtSpec"] = -1;
				gpraData["SvcOtherClinicalCouns"] = 0;
				//gpraData["SvcOtherClinicalCounsSpec"] = -1;
				gpraData["SvcOtherEdu"] = 0;
				//gpraData["SvcOtherEduSpec"] = -1;
				gpraData["SvcOtherMedical"] = 0;
				//gpraData["SvcOtherMedicalSpec"] = -1;
				gpraData["SvcOtherModalitiesSpec"] = "SATED Services";
				gpraData["SvcOtherRecovery"] = 0;//called FB_FLAG in codebook for some reason
				//gpraData["SvcOtherRecoverySpec"] = -1;
				gpraData["SvcOtherModalities"] = 1;
				gpraData["SvcOutpatient"] = 0;
				gpraData["SvcOutreach"] = 0;
				gpraData["SvcPeerCoaching"] = 0;
				gpraData["SvcPharmacological"] = 0;
				gpraData["SvcPreEmployment"] = 0;
				gpraData["SvcRecoveryCoaching"] = 0;
				gpraData["SvcRecoverySupport"] = 0;
				gpraData["SvcReferralTreatment"] = 0;
				gpraData["SvcRelapsePrevention"] = 0;
				gpraData["SvcResidentialRehab"] = 0;
				gpraData["SvcScreening"] = 1;
				gpraData["SvcSelfHelpSupport"] = 0;
				gpraData["SvcSpiritualSupport"] = 0;
				gpraData["SvcSubstanceAbuseEdu"] = 0;
				gpraData["SvcTransportation"] = 0;
				gpraData["SvcTreatmentPlanning"] = 0;
			}
			
			protected function saveButton_clickHandler(event:MouseEvent):void
			{
				var results:Array = validateGPRA();
				if(results.length > 0)
				{
					Alert.show(results.join("\n"),"Validation Errors");
				}
				else
					parseForm();
			}
			
			protected function validateGPRA():Array
			{
				var results:Array = new Array();
				var ev:ValidationResultEvent;
				for each(var q:QuestionClass in questionDict)
				{
					if(q.validator != null && q.validator.enabled)
					{
						if(!q.isSkipped && q.inputControl.enabled)
						{
							ev = q.validator.validate();
							if(ev.results != null)
							{
								for each(var vr:ValidationResult in ev.results)
								{
									var s:String = "";
									if(q.owner != null)
										s += ((q.owner as mx.containers.Form).owner as NavigatorContent).label; //q.owner is form, form.owner is navigator panel
									else
										s += (((q.inputControl.owner as QuestionClass).owner as mx.containers.Form).owner as NavigatorContent).label; //inputControl.owner is another question
									s += ": " + q.codeName + " - ";
									s += vr.errorMessage;
									results.push(s);
								}
							}
						}
						else
						{
							var evt:ValidationResultEvent = new ValidationResultEvent(ValidationResultEvent.VALID);
							q.validator.dispatchEvent(evt);
						}
					}
				}
				return results;
			}
			
			protected function saveGpraResult_resultHandler(event:ResultEvent):void
			{
				global.pageClient.populateClientForm();
				var g:GpraVO = new GpraVO();
				if(saveGpraResult.lastResult > 0)
				{
					g.autoid = saveGpraResult.lastResult;
					Alert.show("New GPRA created.");
				}
				else if(saveGpraResult.lastResult == 0)
				{
					g.autoid = global.activeGPRA.autoid;
					Alert.show("Existing GPRA updated.");
				}
				
				/*g.status = global.activeGPRA.data.source["gpra_status"];
				if(g.status == 1)
				{
					viewStack.selectedChild = recordTab;
					viewStack.removeChild(saveTab);
				}*/
				g.type = global.activeGPRA.data.source["InterviewTypeCode"];
				g.date = global.activeGPRA.data.source["InterviewCreateDate"];
				global.activeGPRA = g;
			}
		]]>
	</fx:Script>
	<fx:Declarations>
		<gpraservice:GpraService id="gpraService"
								 fault="Alert.show(event.fault.faultString + '\n' + event.fault.faultDetail)"
								 showBusyCursor="true"/>
		<s:CallResponder id="saveGpraResult" result="saveGpraResult_resultHandler(event)"/>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		
	</fx:Declarations>
	
	<mx:TabBar id="tabBar" x="0" y="10" dataProvider="viewStack"
			   direction="vertical"/>
	<mx:ViewStack id="viewStack" x="105" y="10" width="603" height="650"
				  backgroundColor="#EAEAEA" creationPolicy="all" dropShadowVisible="true">
		<s:NavigatorContent id="recordTab" width="100%" height="100%" label="Record">
			<dci:RecordForm id="recordForm"/>
		</s:NavigatorContent>
		<s:NavigatorContent id="sbirtTab" width="100%" height="100%" label="SBIRT">
			<dci:SBIRTForm id="sbirtForm"/>
		</s:NavigatorContent>
		<s:NavigatorContent id="demoTab" width="100%" height="100%" label="Demographic">
			<dci:DemographicsForm id="demoForm"/>
		</s:NavigatorContent>
		<s:NavigatorContent id="demo2Tab" width="100%" height="100%" label="Demographic2">
			<dci:Demographics2Form id="demo2Form"/>
		</s:NavigatorContent>
		<s:NavigatorContent id="military1Tab" width="100%" height="100%" label="Military1">
			<dci:Military1Form id="military1Form" />
		</s:NavigatorContent>
		<s:NavigatorContent id="military2Tab" width="100%" height="100%" label="Military2">
			<dci:Military2Form id="military2Form"/>
		</s:NavigatorContent>
		<s:NavigatorContent id="drugTab" width="100%" height="100%" label="Drug">
			<dci:DrugForm id="drugForm" />
		</s:NavigatorContent>
		<s:NavigatorContent id="livingTab" width="100%" height="100%" label="Living">
			<dci:LivingForm id="livingForm" />
		</s:NavigatorContent>
		<s:NavigatorContent id="employmentTab" width="100%" height="100%" label="Employment">
			<dci:EmploymentForm id="employmentForm" />
		</s:NavigatorContent>
		<s:NavigatorContent id="crimeTab" width="100%" height="100%" label="Crime">
			<dci:CrimeForm id="crimeForm" />
		</s:NavigatorContent>
		<s:NavigatorContent id="health1Tab" width="100%" height="100%" label="Health1">
			<dci:Health1Form id="health1Form" />
		</s:NavigatorContent>
		<s:NavigatorContent id="health2Tab" width="100%" height="100%" label="Health2">
			<dci:Health2Form id="health2Form" />
		</s:NavigatorContent>
		<s:NavigatorContent id="health3Tab" width="100%" height="100%" label="Health3">
			<dci:Health3Form id="health3Form" />
		</s:NavigatorContent>
		<s:NavigatorContent id="health4Tab" width="100%" height="100%" label="Health4">
			<dci:Health4Form id="health4Form" />
		</s:NavigatorContent>
		<s:NavigatorContent id="socialTab" width="100%" height="100%" label="Social">
			<dci:SocialForm id="socialForm" />
		</s:NavigatorContent>
		<s:NavigatorContent id="followupTab" width="100%" height="100%" label="Followup">
			<dci:FollowupForm id="followupForm" />
		</s:NavigatorContent>
		<s:NavigatorContent id="dischargeTab" width="100%" height="100%" label="Discharge">
			<dci:DischargeForm id="dischargeForm" />
		</s:NavigatorContent>
		<s:NavigatorContent id="saveTab" width="100%" height="100%" label="Save">
			<s:Button id="saveButton" x="200" y="200" label="Validate and Save GPRA"
					  click="saveButton_clickHandler(event)"/>
		</s:NavigatorContent>
	</mx:ViewStack>
</s:NavigatorContent>

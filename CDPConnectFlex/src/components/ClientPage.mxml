<?xml version="1.0" encoding="utf-8"?>
<s:NavigatorContent xmlns:fx="http://ns.adobe.com/mxml/2009"
					xmlns:s="library://ns.adobe.com/flex/spark"
					xmlns:mx="library://ns.adobe.com/flex/mx"
					xmlns:custom="components.*"
					xmlns:gpraservice="services.gpraservice.*"
					xmlns:styles="com.adobe.fiber.styles.*"
					xmlns:clientservice="services.clientservice.*"
					width="400" height="300">
	<fx:Script>
		<![CDATA[
			import flash.globalization.DateTimeFormatter;
			import flash.globalization.LocaleID;
			
			import mx.collections.ArrayCollection;
			import mx.collections.ArrayList;
			import mx.controls.Alert;
			import mx.controls.DateField;
			import mx.controls.Text;
			import mx.core.FlexGlobals;
			import mx.events.CloseEvent;
			import mx.events.ValidationResultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.validators.NumberValidator;
			import mx.validators.StringValidator;
			import mx.validators.ValidationResult;
			import mx.validators.Validator;
			
			import valueObjects.ClientVO;
			import valueObjects.GpraVO;
			
			protected var dateFormatter:DateTimeFormatter = new DateTimeFormatter(LocaleID.DEFAULT);
			[Bindable] protected var clientGPRAs:ArrayCollection = new ArrayCollection();
			[Bindable] protected var staffList:ArrayList = new ArrayList();
			protected var global:CDPConnectFlex = FlexGlobals.topLevelApplication as CDPConnectFlex;
			protected var validators:Array = new Array();
			
			public function creationCompleteHandler():void
			{
				staffList.addAll(global.userList);
				dateFormatter.setDateTimePattern("MM/dd/yyyy");
				
				var dv:DateAgeValidator = new DateAgeValidator();
				dv.required = true;
				dv.source = cfDOB;
				dv.property = "text";
				dv.minType = DateAgeValidator.YEAR;
				dv.min = 3;
				dv.maxType = DateAgeValidator.YEAR;
				dv.max = 100;
				validators.push(dv);
				
				dv = new DateAgeValidator();
				dv.required = true;
				dv.source = cfCreationDate;
				dv.property = "text";
				dv.minType = DateAgeValidator.DAY;
				dv.min = 0;
				dv.maxType = DateAgeValidator.YEAR;
				dv.max = 1;
				validators.push(dv);
				
				var v:Validator = new Validator();
				v.required = true;
				v.source = cfFirstName;
				v.property = "text";
				v = new Validator();
				v.required = true;
				v.source = cfLastName;
				v.property = "text";
				validators.push(v);
				
				var nv:NumberValidator = new NumberValidator();
				nv.required = true;
				nv.source = cfSSN;
				nv.property = "text";
				nv.allowNegative = false;
				nv.domain = "int";
				validators.push(nv);
				
				var sv:StringValidator = new StringValidator();
				sv.required = true;
				sv.source = cfSSN;
				sv.property = "text";
				sv.minLength = 4;
				sv.maxLength = 4;
				validators.push(sv);
			}	
			
			public function populateClientForm():void
			{
				resetClientForm();
				if(global.activeClient != null)
				{
					cfFirstName.text = global.activeClient.firstname;
					cfLastName.text = global.activeClient.lastname;
					cfDOB.text = global.activeClient.dob;
					cfSSN.text = global.activeClient.ssn;
					if(global.activeClient.createddate != null)
						cfCreationDate.text = global.activeClient.createddate;
					else
						cfCreationDate.text = dateFormatter.format(new Date());
					cfStaff.selectedItem = global.activeClient.intakestaff;
					getGpraSummaryByClientIDResult.token = gpraService.getGpraSummaryByClientID(global.activeClient.autoid);
				}
			}
			
			public function resetClientForm():void
			{
				cfFirstName.text = "";
				cfLastName.text = "";
				cfDOB.text = "";
				cfSSN.text = "";
				cfCreationDate.text = "";
				cfCreationDate.text = dateFormatter.format(new Date());
				cfStaff.selectedItem = global.activeUser.name;
				clientGPRAs = null;
			}
			
			protected function cfSaveButton_clickHandler(event:MouseEvent):void
			{
				if(validateClient())
				{
					var c:ClientVO = new ClientVO();
					c.firstname = cfFirstName.text;
					c.lastname = cfLastName.text;
					c.ssn = cfSSN.text;
					c.intakestaff = cfStaff.selectedItem;
					c.dob = cfDOB.text;
					c.createddate = cfCreationDate.text;
					
					if(global.activeClient != null)
					{
						c.autoid = global.activeClient.autoid;
						c.gpras = global.activeClient.gpras;
						updateClientResult.token = clientService.updateClient(c);
					}
					else
					{
						createClientResult.token = clientService.createClient(c);
					}
				}
				else
					Alert.show("There are errors in the client form.","Client not saved.");
			}
			
			protected function validateClient():Boolean
			{
				var results:Array = new Array();
				var ev:ValidationResultEvent;
				for each(var v:Validator in validators)
				{
					ev = v.validate();
					if(ev.results != null)
					{
						return false;
					}
				}
				return true;
			}
			
			protected function createClientResult_resultHandler(event:ResultEvent):void
			{
				if(createClientResult.lastResult != null)
				{
					Alert.show("Client created.");
					global.activeClient = createClientResult.lastResult;
					clientGPRAs = global.activeClient.gpras;
					global.pageClientButton.enabled = true;
				}
				else
					Alert.show("Client not created.");
			}
			
			protected function updateClientResult_resultHandler(event:ResultEvent):void
			{
				if(updateClientResult.lastResult != null)
				{
					Alert.show("Client updated.");
					global.activeClient = updateClientResult.lastResult;
					clientGPRAs = global.activeClient.gpras;
				}
				else
					Alert.show("Client not updated.");
			}
			
			protected function loadGpraButton_clickHandler(event:MouseEvent):void
			{
				if(gpraGrid.selectedIndex > -1)
				{
					global.activeGPRA = gpraGrid.selectedItem as GpraVO;
					getGpraByIDResult.token = gpraService.getGpraByID(global.activeGPRA.autoid);
				}
			}
			protected function getGpraByIDResult_resultHandler(event:ResultEvent):void
			{
				if(getGpraByIDResult.lastResult != null)
				{
					global.pageGPRA.initializeGPRA();
					global.activeGPRA.data = getGpraByIDResult.lastResult;
					global.pageGPRA.populateForm(global.activeGPRA.data);
					global.pageViewstack.selectedChild = global.pageGPRA;
					global.pageGpraButton.enabled = true;
				}
				else
					Alert.show("GPRA not found with this ID.");
			}
			
			protected function createIntakeButton_clickHandler(event:MouseEvent):void
			{
				if(global.activeClient == null)
					Alert.show("Add or load a client first.");
				else if(global.activeClient.intake != null)
					Alert.show("A GPRA intake already exists.");
				else
				{
					var g:GpraVO = new GpraVO();
					g.autoid = -1;
					g.type = 1;
					g.status = 0;
					global.activeGPRA = g;
					global.pageViewstack.selectedChild = global.pageGPRA;
					global.pageGpraButton.enabled = true;
					global.pageGPRA.initializeGPRA();
				}	
			}
			
			protected function getGpraSummaryByClientIDResult_resultHandler(event:ResultEvent):void
			{
				global.activeClient.gpras = getGpraSummaryByClientIDResult.lastResult;
				clientGPRAs = getGpraSummaryByClientIDResult.lastResult;
				
				global.activeClient.intake = null;
				global.activeClient.followup = null;
				global.activeClient.discharge = null;
				for each(var g:GpraVO in clientGPRAs)
				{
					if(g.type == 1)
					{
						global.activeClient.intake = g;
						getIntakeData.token = gpraService.getGpraByID(g.autoid);
					}
					else if(g.type == 2)
						global.activeClient.followup = g;
					else if(g.type == 5)
						global.activeClient.discharge = g;
				}
			}
			
			protected function createDischargeButton_clickHandler(event:MouseEvent):void
			{
				if(global.activeClient == null)
					Alert.show("Add or load a client first.");
				else if(global.activeClient.intake == null)
					Alert.show("Create a GPRA intake first.");
				else if(global.activeClient.discharge != null)
					Alert.show("A GPRA discharge already exists.");
				else
				{
					var g:GpraVO = new GpraVO();
					g.autoid = -1;
					g.type = 5;
					g.status = 0;
					global.activeGPRA = g;
					global.pageViewstack.selectedChild = global.pageGPRA;
					global.pageGpraButton.enabled = true;
					global.pageGPRA.initializeGPRA();
				}	
			}
			
			protected function createFollowupButton_clickHandler(event:MouseEvent):void
			{
				if(global.activeClient == null)
					Alert.show("Add or load a client first.");
				else if(global.activeClient.intake == null)
					Alert.show("Create a GPRA intake first.");
				else if(global.activeClient.followup != null)
					Alert.show("A GPRA followup already exists.");
				else
				{
					var g:GpraVO = new GpraVO();
					g.autoid = -1;
					g.type = 2;
					g.status = 0;
					global.activeGPRA = g;
					global.pageViewstack.selectedChild = global.pageGPRA;
					global.pageGpraButton.enabled = true;
					global.pageGPRA.initializeGPRA();
				}
			}
			
			protected function getIntakeData_resultHandler(event:ResultEvent):void
			{
				global.activeClient.intake.data = getIntakeData.lastResult;
			}
			
		]]>
	</fx:Script>
	<fx:Style> 
		@namespace s "library://ns.adobe.com/flex/spark"; 
		@namespace mx "library://ns.adobe.com/flex/mx"; 
		@namespace components "components.*"; 

	</fx:Style>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<s:CallResponder id="getGpraByIDResult" result="getGpraByIDResult_resultHandler(event)"/>
		<s:CallResponder id="getIntakeData" result="getIntakeData_resultHandler(event)"/>
		<gpraservice:GpraService id="gpraService"
								 fault="Alert.show(event.fault.faultString + '\n' + event.fault.faultDetail)"
								 showBusyCursor="true"/>
		<s:CallResponder id="createClientResult" result="createClientResult_resultHandler(event)"/>
		<s:CallResponder id="updateClientResult" result="updateClientResult_resultHandler(event)"/>
		<clientservice:ClientService id="clientService"
									 fault="Alert.show(event.fault.faultString + '\n' + event.fault.faultDetail)"
									 showBusyCursor="true"/>
		<s:CallResponder id="getGpraSummaryByClientIDResult" result="getGpraSummaryByClientIDResult_resultHandler(event)"/>
	</fx:Declarations>
	<s:Form id="clientForm" x="10" y="5" width="695" height="200" defaultButton="{cfSaveButton}" creationPolicy="all" fontWeight="bold">
		<s:layout>
			<s:TileLayout columnWidth="250" horizontalAlign="right" orientation="columns" verticalGap="30"
						  requestedColumnCount="2" requestedRowCount="4"/>
		</s:layout>
		<mx:FormItem label="First Name">
			<s:TextInput id="cfFirstName" fontWeight="normal"/>
		</mx:FormItem>
		<mx:FormItem label="Last name">
			<s:TextInput id="cfLastName" fontWeight="normal"/>
		</mx:FormItem>
		<mx:FormItem label="Last 4 SSN">
			<s:TextInput id="cfSSN" fontWeight="normal"/>
		</mx:FormItem>
		<mx:FormItem label="Date of Birth">
			<s:TextInput id="cfDOB" fontWeight="normal"/>
		</mx:FormItem>
		<mx:FormItem label="Intake Staff">
			<s:DropDownList id="cfStaff" fontWeight="normal" width="128" dataProvider="{staffList}"></s:DropDownList>
		</mx:FormItem>
		<mx:FormItem label="Creation Date">
			<s:TextInput id="cfCreationDate" fontWeight="normal"/>
		</mx:FormItem>
		<mx:FormItem>
			<s:Button id="cfSaveButton" label="Save"  fontWeight="normal"
					  click="cfSaveButton_clickHandler(event)"/>
		</mx:FormItem>
	</s:Form>
	<s:DataGrid id="gpraGrid" x="50" y="225" width="220" height="150"
				dataProvider="{clientGPRAs}" itemRenderer="components.gpraGridRenderer"
				requestedRowCount="3" resizableColumns="false">
		<s:columns>
			<s:ArrayList>
				<s:GridColumn dataField="type" headerText="Type" width="100"></s:GridColumn>
				<s:GridColumn dataField="date" headerText="Date" width="100"></s:GridColumn>
			</s:ArrayList>
		</s:columns>
		<s:typicalItem>
			<fx:Object type="Intake" date="5/22/2013"></fx:Object>
		</s:typicalItem>
	</s:DataGrid>
	<s:Button id="createIntakeButton" x="290" y="296"
			  label="Create GPRA Intake" click="createIntakeButton_clickHandler(event)"/>
	<s:Button id="createDischargeButton" x="290" y="325"
			  label="Create GPRA Discharge" click="createDischargeButton_clickHandler(event)"/>
	<s:Button id="createFollowupButton" x="290" y="354"
			  label="Create GPRA Followup" click="createFollowupButton_clickHandler(event)"/>
	<s:Button id="loadGpraButton" x="290" y="232" width="146" label="Load Selected GPRA"
			  click="loadGpraButton_clickHandler(event)"/>
	<s:Button id="deleteGpraButton" x="290" y="261" width="147" label="Delete Selected GPRA"/>
</s:NavigatorContent>

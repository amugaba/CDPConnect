<?xml version="1.0" encoding="utf-8"?>
<s:NavigatorContent xmlns:fx="http://ns.adobe.com/mxml/2009"
					xmlns:s="library://ns.adobe.com/flex/spark"
					xmlns:mx="library://ns.adobe.com/flex/mx"
					xmlns:custom="components.*"
					xmlns:gpraservice="services.gpraservice.*"
					xmlns:styles="com.adobe.fiber.styles.*"
					xmlns:clientservice="services.clientservice.*"
					xmlns:gpra="components.gpra.*"
					xmlns:assessmentservice="services.assessmentservice.*"
					width="715" height="700">
	<fx:Script>
		<![CDATA[
			import com.adobe.serializers.utility.TypeUtility;
			
			import components.assessment.AssessType;
			import components.assessment.InterviewForm;
			import components.assessment.InterviewType;
			import components.questions.QuestionClass;
			import components.questions.QuestionList;
			import components.questions.QuestionText;
			import components.questions.QuestionTextRefusable;
			import components.skips.SkipPattern;
			import components.validators.DateAgeValidator;
			
			import mx.collections.ArrayCollection;
			import mx.collections.ArrayList;
			import mx.controls.Alert;
			import mx.controls.DateField;
			import mx.controls.tabBarClasses.Tab;
			import mx.core.FlexGlobals;
			import mx.events.CloseEvent;
			import mx.events.ItemClickEvent;
			import mx.events.StateChangeEvent;
			import mx.events.ValidationResultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.validators.ValidationResult;
			
			import valueObjects.AssessmentVO;
			import valueObjects.ClientVO;
			
			protected var questionDict:Dictionary = new Dictionary();
			
			protected var global:CDPConnectFlex = FlexGlobals.topLevelApplication as CDPConnectFlex;
			protected var gpraForms:Array = new Array();
			protected var gpraTabs:Array = new Array();
			protected var tabButtons:Array = new Array();
			protected var activeTabIndexes:Array = new Array();
			protected var activeFormIndexes:Array = new Array();
			protected var created:Boolean = false;
			public var interviewType:int;
			protected var currentIndex:int = 0;//tracks the tab index currently selected
			
			protected function initializePage():void
			{				
				//Hide old page
				if(viewStack.selectedIndex != 0)
				{
					var oldPage:Object = viewStack.selectedChild;
					viewStack.selectedIndex = 0;
					oldPage.visible = false;
				}
				validationTextArea.text = "";
				prevButton.enabled = false;
				currentIndex = 0;
				
				if(!created)
				{
					gpraForms = new Array(recordForm,sbirtForm,services1Form,services2Form,demoForm,military1Form,military2Form,drugForm,drug2Form,livingForm,employmentForm,
						crimeForm,health1Form,health2Form,health3Form,health4Form,socialForm,followupForm,dischargeForm,dischargeServices1Form,dischargeServices2Form);
					gpraTabs = new Array(recordTab,sbirtTab,services1Tab,services2Tab,demoTab,military1Tab,military2Tab,drugTab,drug2Tab,livingTab,employmentTab,
						crimeTab,health1Tab,health2Tab,health3Tab,health4Tab,socialTab,followupTab,dischargeTab,dischargeServices1Tab,dischargeServices2Tab,saveTab);

					for each(var btmp:Tab in tabBar.getChildren())
						tabButtons.push(btmp);
					created = true;
				}
				
				//intialize and reset all forms
				for each(var form:InterviewForm in gpraForms)
					form.initForm();
			}
			
			protected function determineActiveTabs():void
			{
				//Determine which items are active
				activeTabIndexes = new Array();
				activeFormIndexes = new Array();
				for(var i:int = 0; i < tabButtons.length; i++)
				{
					if(tabButtons[i].visible)
					{
						activeTabIndexes.push(i);
						if(i < gpraForms.length)
							activeFormIndexes.push(i);
					}
				}
				
				//Reorder all tab buttons so that the invisible ones are at the bottom
				//Have to reorder the tabs in the viewstack to correspond to the new order too though
				var index:int = 0;
				for each(i in activeTabIndexes)
				{
					viewStack.setChildIndex(gpraTabs[i],index);
					index++;
				}
			}
			
			//Setup a blank GPRA form
			public function newIntake():void
			{
				interviewType = InterviewType.INTAKE_NEG;//change this value if user fills out services
				initializePage();
				
				//Enable only section A and SBIRT. Then once the user fills out what services were provided, enabled
				//additional sections based on that modality
				enableSectionSBIRT(true);
				enableSectionA(true);
				enableSectionB(false);
				enableSectionCtoG(false);
				enableSectionI(false);
				enableSectionJ(false);
				enableSectionK(false);
				
				recordForm.populateForm();
				determineActiveTabs();
			}
			
			public function newDischarge():void
			{
				interviewType = InterviewType.DISCHARGE_ADMIN;
				initializePage();
				
				//If discharge, do admin discharge by default. If user selects that an interview was done, add other sections
				enableSectionSBIRT(false);
				enableSectionA(false);
				enableSectionB(false);
				enableSectionCtoG(false);
				enableSectionI(false);
				enableSectionJ(true);
				enableSectionK(true);
				dischargeForm.qDischargeDate.answer = global.dateFormatter.format(new Date());
				
				recordForm.populateForm();
				determineActiveTabs();
			}
			
			public function newFollowup():void
			{
				if(global.intakeInterview.subtype == InterviewType.INTAKE_BI)
					interviewType = InterviewType.FOLLOWUP_BI;
				else
					interviewType = InterviewType.FOLLOWUP_RT;
				
				initializePage();
				
				//If followup, look at intake interview type to decide between BI and RT followup
				if(interviewType == InterviewType.INTAKE_BI)
				{
					interviewType = InterviewType.FOLLOWUP_BI;
					enableSectionSBIRT(false);
					enableSectionA(false);
					enableSectionB(true);
					enableSectionCtoG(false);
					enableSectionI(true);
					enableSectionJ(false);
					enableSectionK(true);
				}
				else
				{
					interviewType = InterviewType.FOLLOWUP_RT;
					enableSectionSBIRT(false);
					enableSectionA(false);
					enableSectionB(true);
					enableSectionCtoG(true);
					enableSectionI(true);
					enableSectionJ(false);
					enableSectionK(true);
				}
				recordForm.populateForm();
				determineActiveTabs();
			}
			
			public function loadGPRA(interview:AssessmentVO):void
			{
				interviewType = interview.subtype;
				initializePage();
				
				//Enable only section A and SBIRT. Then once the user fills out what services were provided, enabled
				//additional sections based on that modality
				if(interview.subtype == InterviewType.INTAKE_NEG)
				{
					enableSectionSBIRT(true);
					enableSectionA(true);
					enableSectionB(false);
					enableSectionCtoG(false);
					enableSectionI(false);
					enableSectionJ(false);
					enableSectionK(false);
				}
				else if(interview.subtype == InterviewType.INTAKE_BI)
				{
					enableSectionSBIRT(true);
					enableSectionA(true);
					enableSectionB(true);
					enableSectionCtoG(false);
					enableSectionI(false);
					enableSectionJ(false);
					enableSectionK(false);
				}
				else if(interview.subtype == InterviewType.INTAKE_RT)
				{
					enableSectionSBIRT(true);
					enableSectionA(true);
					enableSectionB(true);
					enableSectionCtoG(true);
					enableSectionI(false);
					enableSectionJ(false);
					enableSectionK(false);
				}
				else if(interview.subtype == InterviewType.FOLLOWUP_RT)
				{
					enableSectionSBIRT(false);
					enableSectionA(false);
					enableSectionB(true);
					enableSectionCtoG(true);
					enableSectionI(true);
					enableSectionJ(false);
					enableSectionK(true);
				}
				else if(interview.subtype == InterviewType.FOLLOWUP_BI)
				{
					enableSectionSBIRT(false);
					enableSectionA(false);
					enableSectionB(true);
					enableSectionCtoG(false);
					enableSectionI(true);
					enableSectionJ(false);
					enableSectionK(true);
				}
				else if(interview.subtype == InterviewType.DISCHARGE_BI)
				{
					enableSectionSBIRT(false);
					enableSectionA(false);
					enableSectionB(true);
					enableSectionCtoG(true);
					enableSectionI(false);
					enableSectionJ(true);
					enableSectionK(true);
				}
				else if(interview.subtype == InterviewType.DISCHARGE_RT)
				{
					enableSectionSBIRT(false);
					enableSectionA(false);
					enableSectionB(true);
					enableSectionCtoG(true);
					enableSectionI(false);
					enableSectionJ(true);
					enableSectionK(true);
				}
				else if(interview.subtype == InterviewType.DISCHARGE_ADMIN)
				{
					enableSectionSBIRT(false);
					enableSectionA(false);
					enableSectionB(false);
					enableSectionCtoG(false);
					enableSectionI(false);
					enableSectionJ(true);
					enableSectionK(true);
					dischargeForm.qDischargeDate.answer = global.dateFormatter.format(new Date());
				}
				
				recordForm.populateForm();
				determineActiveTabs();
				
				//Load data
				for each(var i:int in activeFormIndexes)
					(gpraForms[i] as InterviewForm).loadData(global.activeAssessment.data.source);
				
				//Then process skips
				for each(i in activeFormIndexes)
					(gpraForms[i] as InterviewForm).doAllSkips();
					
				//Then validate
				for each(i in activeFormIndexes)
					(gpraForms[i] as InterviewForm).validateForm();
			}
			
			protected function enableTab(tab:NavigatorContent, enabled:Boolean):void
			{
				(tabButtons[gpraTabs.indexOf(tab)] as Tab).visible = enabled;
			}
			
			protected function enableSectionSBIRT(enabled:Boolean):void
			{
				enableTab(sbirtTab,enabled);
			}
			
			protected function enableSectionA(enabled:Boolean):void
			{
				enableTab(services1Tab,enabled);
				enableTab(services2Tab,enabled);
				enableTab(demoTab,enabled);
				enableTab(military1Tab,enabled);
				enableTab(military2Tab,enabled);
				
				if(enabled)
				{
					var dv:DateAgeValidator = recordForm.qInterviewDate.validator as DateAgeValidator;
					dv.max = 365;
				}
				
				demoForm.qBirthMonth.validator.enabled = enabled;
				demoForm.qBirthYear.validator.enabled = enabled;
			}
			
			protected function enableSectionB(enabled:Boolean):void
			{
				enableTab(drugTab,enabled);
				enableTab(drug2Tab,enabled);
			}
			
			protected function enableSectionCtoG(enabled:Boolean):void
			{
				enableTab(livingTab,enabled);
				enableTab(employmentTab,enabled);
				enableTab(crimeTab,enabled);
				enableTab(health1Tab,enabled);
				enableTab(health2Tab,enabled);
				enableTab(health3Tab,enabled);
				enableTab(health4Tab,enabled);
				enableTab(socialTab,enabled);
			}
			
			protected function enableSectionK(enabled:Boolean):void
			{
				enableTab(dischargeServices1Tab,enabled);
				enableTab(dischargeServices2Tab,enabled);
			}
			
			protected function enableSectionI(enabled:Boolean):void
			{
				enableTab(followupTab,enabled);
				if(enabled)
				{
					//Skip based on answer in intake DCI, since gender question not asked in followup
					if(global.intakeInterview.data.source["Gender"] != 0)
						livingForm.qPregnant.enable();
					else
						livingForm.qPregnant.disable();
					
					//The followup date cannot be before the intake date
					var dv:DateAgeValidator = recordForm.qInterviewDate.validator as DateAgeValidator;
					dv.max = 1 + (new Date().time - DateField.stringToDate(global.intakeInterview.date,"MM/DD/YYYY").time) / 1000 / 60 / 60 / 24;
				}
			}
			
			protected function enableSectionJ(enabled:Boolean):void
			{
				enableTab(dischargeTab,enabled);
				if(enabled)
				{
					//Skip based on answer in intake DCI, since gender question not asked in followup
					if(global.intakeInterview.data.source["Gender"] != 0)
						livingForm.qPregnant.enable();
					else
						livingForm.qPregnant.disable();
					
					//The followup date cannot be before the intake date
					var dv:DateAgeValidator = recordForm.qInterviewDate.validator as DateAgeValidator;
					dv.max = 1 + (new Date().time - DateField.stringToDate(global.intakeInterview.date,"MM/DD/YYYY").time) / 1000 / 60 / 60 / 24;
				}
				dischargeForm.qDischargeDate.validator.enabled = enabled;
			}
			
			/**
			 * Save DCI
			 * 1. Validate for errors
			 * 2. Save each active form's data
			 * */
			protected function saveButton_clickHandler(event:MouseEvent):void
			{
				//Validate all active pages
				var results:Array = new Array();
				for each(var i:int in activeFormIndexes)
				{
					var tmpResults:ArrayList = (gpraForms[i] as InterviewForm).validateForm();
					for(var j:int = 0; j < tmpResults.length; j++)
						results.push(tmpResults.source[j]);
				}
				
				if(results.length > 0)
				{
					validationTextArea.text = results.join("\n");
					Alert.show("Correct the errors shown in the area below and then click 'Save' again.","DCI NOT SAVED"); 
				}
				else
				{
					validationTextArea.text = "";
					parseForm();
				}
			}
			
			//Parse Form Data, construct Assessment data
			protected function parseForm():void
			{
				var data:Array = new Array();
				
				for each(var i:int in activeFormIndexes)
				{
					data = (gpraForms[i] as InterviewForm).saveData(data);
				}
				
				//Add in other fields
				//data["client_autoid"] = global.activeClient.autoid;
				
				//If doing discharge or followup, get gender from the intake
				if(!InterviewType.isIntake(interviewType))
				{
					data["Gender"] = global.intakeInterview.data.source["Gender"];
					data["IntakeDate"] = global.intakeInterview.data.source["InterviewDate"];
				}
				
				//Create
				if(global.activeAssessment == null)
				{
					global.activeAssessment = new AssessmentVO();
					global.activeAssessment.client_autoid = global.activeClient.autoid;
					global.activeAssessment.type = AssessType.DCI;
					global.activeAssessment.subtype = interviewType;
					global.activeAssessment.date = global.dateFormatter.format(new Date());
					global.activeAssessment.complete = 1;
					global.activeAssessment.data = data;
					createAssessmentResult.token = assessmentService.createAssessment(global.activeAssessment);
				}
				else //Update
				{
					//Preserve the autoids when saving
					var data_autoid:int = global.activeAssessment.data.source["autoid"];
					var assessment_autoid:int = global.activeAssessment.data.source["assessment_autoid"];
					data["autoid"] = data_autoid;
					data["assessment_autoid"] = assessment_autoid;
					global.activeAssessment.data = data;
					global.activeAssessment.subtype = interviewType;
					global.activeAssessment.complete = 1;
					global.activeAssessment.type = AssessType.DCI;
					updateAssessmentDataResult.token = assessmentService.updateAssessmentData(global.activeAssessment);
				}
			}
			
			protected function createAssessmentResult_resultHandler(event:ResultEvent):void
			{
				Alert.show("DCI saved.");
				//Add in new autoid and put in assessments grid
				global.activeAssessment = createAssessmentResult.lastResult;
				global.pageHome.clientGroup.assessmentList.addItem(global.activeAssessment);
				
				if(InterviewType.isIntake(interviewType))
				{
					global.activeClient.intakeExists = true;
					global.intakeInterview = global.activeAssessment;
				}
				else if(InterviewType.isDischarge(interviewType))
					global.activeClient.dischargeExists = true;
				else if(InterviewType.isFollowup(interviewType))
					global.activeClient.followupExists = true;
			}
			
			protected function updateAssessmentResult_resultHandler(event:ResultEvent):void
			{
				Alert.show("DCI updated.");
			}
			
			protected function headerButton_clickHandler(event:MouseEvent):void
			{
				var output:String = "";
				var file:FileReference = new FileReference();
				
				for each(var form:InterviewForm in gpraForms)
				{
					//get each question code from each form
					for each(var q:QuestionClass in form.questions)
						output += q.codeName + "," + q.className + "," + q.answerType.toString() + "\r\n";
				}
				file.save(output,"CodeNames.csv");
			}
			
			protected function nextButton_clickHandler(event:MouseEvent):void
			{
				if(isCurrentFormValid())
				{
					viewStack.selectedIndex = viewStack.selectedIndex + 1;
					if(viewStack.selectedIndex == activeTabIndexes.length - 1)
						nextButton.enabled = false;
					prevButton.enabled = true;
					currentIndex = viewStack.selectedIndex;
				}
			}
			
			protected function prevButton_clickHandler(event:MouseEvent):void
			{
				if(isCurrentFormValid())
				{
					viewStack.selectedIndex = viewStack.selectedIndex - 1;
					if(viewStack.selectedIndex == 0)
						prevButton.enabled = false;
					nextButton.enabled = true;
					currentIndex = viewStack.selectedIndex;
				}
			}
			
			protected function tabBar_itemClickHandler(event:ItemClickEvent):void
			{
				if(isCurrentFormValid())
				{
					//the tabs can change here if modality is changed, so make sure not to go beyond the last active tab
					viewStack.selectedIndex = Math.min(viewStack.selectedIndex, activeTabIndexes.length -1);
					
					prevButton.enabled = true;
					nextButton.enabled = true;
					if(viewStack.selectedIndex == 0)
						prevButton.enabled = false;
					if(viewStack.selectedIndex == activeTabIndexes.length - 1)
						nextButton.enabled = false;
					currentIndex = viewStack.selectedIndex;
				}
				else
					viewStack.selectedIndex = currentIndex;
			}
			
			protected function isCurrentFormValid():Boolean
			{
				if(currentIndex >= activeFormIndexes.length)
					return true;//if the current tab is the Save page
				
				var currentForm:InterviewForm = gpraForms[activeFormIndexes[currentIndex]];
				var errors:ArrayList = currentForm.validateForm();
				if(errors.length != 0)
				{
					Alert.show("Correct the errors on this page before continuing.");
					return false;
				}
				
				//if doing intake, check if Services1 tab chose a new modality
				if(currentForm == services1Form)
				{
					var modality:int = InterviewType.INTAKE_NEG;
					if(services1Form.qSvcReferralToTreatment.answer == "Yes" || services1Form.qSvcBriefTreatment.answer == "Yes")
						modality = InterviewType.INTAKE_RT;
					else if(services1Form.qSvcBriefIntervention.answer == "Yes")
						modality = InterviewType.INTAKE_BI;
					
					//if the modality changed, change tabs
					if(interviewType != modality)
					{
						interviewType = modality;
						if(interviewType == InterviewType.INTAKE_NEG)
						{
							enableSectionB(false);
							enableSectionCtoG(false);
						}
						else if(interviewType == InterviewType.INTAKE_BI)
						{
							enableSectionB(true);
							enableSectionCtoG(false);
						}
						else if(interviewType == InterviewType.INTAKE_RT)
						{
							enableSectionB(true);
							enableSectionCtoG(true);
						}
						determineActiveTabs();
					}
				}
				return true;
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<assessmentservice:AssessmentService id="assessmentService"
											 fault="Alert.show(event.fault.faultString + '\n' + event.fault.faultDetail)"
											 showBusyCursor="true"/>
		<s:CallResponder id="createAssessmentResult" result="createAssessmentResult_resultHandler(event)"/>
		<s:CallResponder id="updateAssessmentDataResult" result="updateAssessmentResult_resultHandler(event)"/>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<mx:TabBar id="tabBar" x="0" y="0" dataProvider="viewStack"
			   direction="vertical" itemClick="tabBar_itemClickHandler(event)"/>
	<mx:ViewStack id="viewStack" x="105" y="0" width="603" height="681"
				  backgroundColor="#EAEAEA" creationPolicy="all" dropShadowVisible="true">
		<s:NavigatorContent id="recordTab" width="100%" height="100%" label="Record">
			<gpra:RecordForm id="recordForm"/>
		</s:NavigatorContent>
		<s:NavigatorContent id="sbirtTab" width="100%" height="100%" label="SBIRT">
			<gpra:SBIRTForm id="sbirtForm"/>
		</s:NavigatorContent>
		<s:NavigatorContent id="services1Tab" width="100%" height="100%" label="Services1">
			<gpra:Services1Form id="services1Form"/>
		</s:NavigatorContent>
		<s:NavigatorContent id="services2Tab" width="100%" height="100%" label="Services2">
			<gpra:Services2Form id="services2Form"/>
		</s:NavigatorContent>
		<s:NavigatorContent id="demoTab" width="100%" height="100%" label="Demographic">
			<gpra:DemographicsForm id="demoForm"/>
		</s:NavigatorContent>
		<s:NavigatorContent id="military1Tab" width="100%" height="100%" label="Military1">
			<gpra:Military1Form id="military1Form" />
		</s:NavigatorContent>
		<s:NavigatorContent id="military2Tab" width="100%" height="100%" label="Military2">
			<gpra:Military2Form id="military2Form"/>
		</s:NavigatorContent>
		<s:NavigatorContent id="drugTab" width="100%" height="100%" label="Drug1">
			<gpra:DrugForm id="drugForm" />
		</s:NavigatorContent>
		<s:NavigatorContent id="drug2Tab" width="100%" height="100%" label="Drug2">
			<gpra:Drug2Form id="drug2Form" />
		</s:NavigatorContent>
		<s:NavigatorContent id="livingTab" width="100%" height="100%" label="Living">
			<gpra:LivingForm id="livingForm" />
		</s:NavigatorContent>
		<s:NavigatorContent id="employmentTab" width="100%" height="100%" label="Employment">
			<gpra:EmploymentForm id="employmentForm" />
		</s:NavigatorContent>
		<s:NavigatorContent id="crimeTab" width="100%" height="100%" label="Crime">
			<gpra:CrimeForm id="crimeForm" />
		</s:NavigatorContent>
		<s:NavigatorContent id="health1Tab" width="100%" height="100%" label="Health1">
			<gpra:Health1Form id="health1Form" />
		</s:NavigatorContent>
		<s:NavigatorContent id="health2Tab" width="100%" height="100%" label="Health2">
			<gpra:Health2Form id="health2Form" />
		</s:NavigatorContent>
		<s:NavigatorContent id="health3Tab" width="100%" height="100%" label="Health3">
			<gpra:Health3Form id="health3Form" />
		</s:NavigatorContent>
		<s:NavigatorContent id="health4Tab" width="100%" height="100%" label="Health4">
			<gpra:Health4Form id="health4Form" />
		</s:NavigatorContent>
		<s:NavigatorContent id="socialTab" width="100%" height="100%" label="Social">
			<gpra:SocialForm id="socialForm" />
		</s:NavigatorContent>
		<s:NavigatorContent id="followupTab" width="100%" height="100%" label="Followup">
			<gpra:FollowupForm id="followupForm" />
		</s:NavigatorContent>
		<s:NavigatorContent id="dischargeTab" width="100%" height="100%" label="Discharge">
			<gpra:DischargeForm id="dischargeForm" />
		</s:NavigatorContent>
		<s:NavigatorContent id="dischargeServices1Tab" width="100%" height="100%" label="Services 1">
			<gpra:Services1DischargeForm id="dischargeServices1Form" />
		</s:NavigatorContent>
		<s:NavigatorContent id="dischargeServices2Tab" width="100%" height="100%" label="Services 2">
			<gpra:Services2DischargeForm id="dischargeServices2Form" />
		</s:NavigatorContent>
		<s:NavigatorContent id="saveTab" width="100%" height="100%" label="Save">
			<s:Button id="saveButton" x="243" y="88" height="56" label="Validate and Save"
					  click="saveButton_clickHandler(event)"/>
			<s:Button id="headerButton" x="200" y="300" label="Get Headers" visible="false"
					  click="headerButton_clickHandler(event)"/>
			<s:Label x="252" y="183" fontWeight="bold" text="Validation Results"/>
			<s:TextArea id="validationTextArea" x="133" y="201" width="341" height="232" editable="false"/>
		</s:NavigatorContent>
	</mx:ViewStack>
	<s:Image id="nextButton" x="650" y="630" source="assets/arrow_next_20.png" useHandCursor="true" buttonMode="true" click="nextButton_clickHandler(event)"/>
	<s:Image id="prevButton" x="115" y="630" source="assets/arrow_prev_20.png" useHandCursor="true" buttonMode="true" click="prevButton_clickHandler(event)"/>
</s:NavigatorContent>

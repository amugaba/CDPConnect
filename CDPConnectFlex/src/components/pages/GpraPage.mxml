<?xml version="1.0" encoding="utf-8"?>
<pages:InstrumentPage xmlns:fx="http://ns.adobe.com/mxml/2009"
					xmlns:s="library://ns.adobe.com/flex/spark"
					xmlns:mx="library://ns.adobe.com/flex/mx"
					xmlns:custom="components.*"
					xmlns:styles="com.adobe.fiber.styles.*"
					xmlns:gpra="components.gpra.*"
					xmlns:pages="components.pages.*">
	<fx:Script>
		<![CDATA[
			import components.assessment.AssessType;
			import components.assessment.InterviewForm;
			import components.assessment.InterviewType;
			import components.gpra.*;
			import components.validators.DateAgeValidator;
			
			import mx.controls.DateField;
			import mx.events.FlexEvent;
			
			import spark.components.NavigatorContent;
			
			//Form variables
			public var recordForm:RecordForm;
			public var sbirtForm:SBIRTForm;
			public var services1Form:Services1Form;
			public var services2Form:Services2Form;
			public var demoForm:DemographicsForm;
			public var military1Form:Military1Form;
			public var military2Form:Military2Form;
			public var drugForm:DrugForm;
			public var drug2Form:Drug2Form;
			public var livingForm:LivingForm;
			public var employmentForm:EmploymentForm;
			public var crimeForm:CrimeForm;
			public var health1Form:Health1Form;
			public var health2Form:Health2Form;
			public var health3Form:Health3Form;
			public var health4Form:Health4Form;
			public var socialForm:SocialForm;
			public var followupForm:FollowupForm;
			public var dischargeForm:DischargeForm;
			public var dischargeServices1Form:Services1DischargeForm;
			public var dischargeServices2Form:Services2DischargeForm;
			
			public var recordTab:NavigatorContent;
			public var sbirtTab:NavigatorContent;
			public var services1Tab:NavigatorContent;
			public var services2Tab:NavigatorContent;
			public var demoTab:NavigatorContent;
			public var military1Tab:NavigatorContent;
			public var military2Tab:NavigatorContent;
			public var drugTab:NavigatorContent;
			public var drug2Tab:NavigatorContent;
			public var livingTab:NavigatorContent;
			public var employmentTab:NavigatorContent;
			public var crimeTab:NavigatorContent;
			public var health1Tab:NavigatorContent;
			public var health2Tab:NavigatorContent;
			public var health3Tab:NavigatorContent;
			public var health4Tab:NavigatorContent;
			public var socialTab:NavigatorContent;
			public var followupTab:NavigatorContent;
			public var dischargeTab:NavigatorContent;
			public var dischargeServices1Tab:NavigatorContent;
			public var dischargeServices2Tab:NavigatorContent;
			
			//Construct all forms, then construct all tabs and put them in the viewstack
			protected override function loadFormsAndTabs():void
			{
				assessType = AssessType.GPRA;
				recordForm = new RecordForm();
				sbirtForm = new SBIRTForm();
				services1Form = new Services1Form();
				services2Form = new Services2Form();
				demoForm = new DemographicsForm();
				military1Form = new Military1Form();
				military2Form = new Military2Form();
				drugForm = new DrugForm();
				drug2Form = new Drug2Form();
				livingForm = new LivingForm();
				employmentForm = new EmploymentForm();
				crimeForm = new CrimeForm();
				health1Form = new Health1Form();
				health2Form = new Health2Form();
				health3Form = new Health3Form();
				health4Form = new Health4Form();
				socialForm = new SocialForm();
				followupForm = new FollowupForm();
				dischargeForm = new DischargeForm();
				dischargeServices1Form = new Services1DischargeForm();
				dischargeServices2Form = new Services2DischargeForm();
				
				recordTab = createTab(recordForm,"Record");
				sbirtTab = createTab(sbirtForm,"SBIRT");
				services1Tab = createTab(services1Form,"Services1");
				services2Tab = createTab(services2Form,"Services2");
				demoTab = createTab(demoForm,"Demographics");
				military1Tab = createTab(military1Form,"Military1");
				military2Tab = createTab(military2Form,"Military2");
				drugTab = createTab(drugForm,"Drug1");
				drug2Tab = createTab(drug2Form,"Drug2");
				livingTab = createTab(livingForm,"Living");
				employmentTab = createTab(employmentForm,"Employment");
				crimeTab = createTab(crimeForm,"Crime");
				health1Tab = createTab(health1Form,"Health1");
				health2Tab = createTab(health2Form,"Health2");
				health3Tab = createTab(health3Form,"Health3");
				health4Tab = createTab(health4Form,"Health4");
				socialTab = createTab(socialForm,"Social");
				followupTab = createTab(followupForm,"Followup");
				dischargeTab = createTab(dischargeForm,"Discharge");
				dischargeServices1Tab = createTab(dischargeServices1Form,"Services1");
				dischargeServices2Tab = createTab(dischargeServices2Form,"Services2");
				viewStack.addElement(saveTab);//move the save tab to the end
				
				//Put forms and tabs into lists
				forms = new Array(recordForm,sbirtForm,services1Form,services2Form,demoForm,military1Form,military2Form,drugForm,drug2Form,livingForm,employmentForm,
					crimeForm,health1Form,health2Form,health3Form,health4Form,socialForm,followupForm,dischargeForm,dischargeServices1Form,dischargeServices2Form);
				tabs = new Array(recordTab,sbirtTab,services1Tab,services2Tab,demoTab,military1Tab,military2Tab,drugTab,drug2Tab,livingTab,employmentTab,
					crimeTab,health1Tab,health2Tab,health3Tab,health4Tab,socialTab,followupTab,dischargeTab,dischargeServices1Tab,dischargeServices2Tab,saveTab);
			}
			
			//Add all of the tabs and forms to the view stack
			protected function createTab(form:InterviewForm, tabLabel:String):NavigatorContent
			{
				var nc:NavigatorContent = new NavigatorContent();
				nc.percentWidth = 100;
				nc.percentHeight = 100;
				nc.label = tabLabel;
				nc.addElement(form);
				viewStack.addElement(nc);
				return nc;
			}
			
			protected override function populateRecordForm():void
			{
				recordForm.populateForm();
			}
			
			protected override function enableSectionSBIRT(enabled:Boolean):void
			{
				enableTab(sbirtTab,enabled);
			}
			
			protected override function enableSectionA(enabled:Boolean):void
			{
				enableTab(services1Tab,enabled);
				enableTab(services2Tab,enabled);
				enableTab(demoTab,enabled);
				enableTab(military1Tab,enabled);
				enableTab(military2Tab,enabled);
				
				if(enabled)
				{
					var dv:DateAgeValidator = recordForm.qInterviewDate.validator as DateAgeValidator;
					dv.max = 365;
				}
				
				demoForm.qBirthMonth.validator.enabled = enabled;
				demoForm.qBirthYear.validator.enabled = enabled;
			}
			
			protected override function enableSectionB(enabled:Boolean):void
			{
				enableTab(drugTab,enabled);
				enableTab(drug2Tab,enabled);
			}
			
			protected override function enableSectionCtoG(enabled:Boolean):void
			{
				enableTab(livingTab,enabled);
				enableTab(employmentTab,enabled);
				enableTab(crimeTab,enabled);
				enableTab(health1Tab,enabled);
				enableTab(health2Tab,enabled);
				enableTab(health3Tab,enabled);
				enableTab(health4Tab,enabled);
				enableTab(socialTab,enabled);
			}
			
			protected override function enableSectionK(enabled:Boolean):void
			{
				enableTab(dischargeServices1Tab,enabled);
				enableTab(dischargeServices2Tab,enabled);
			}
			
			protected override function enableSectionI(enabled:Boolean):void
			{
				enableTab(followupTab,enabled);
				if(enabled)
				{
					//Skip based on answer in intake DCI, since gender question not asked in followup
					if(global.intakeInterview.data.source["Gender"] != 0)
						livingForm.qPregnant.enable();
					else
						livingForm.qPregnant.disable();
					
					//The followup date cannot be before the intake date
					var dv:DateAgeValidator = recordForm.qInterviewDate.validator as DateAgeValidator;
					dv.max = 1 + (new Date().time - DateField.stringToDate(global.intakeInterview.date,"MM/DD/YYYY").time) / 1000 / 60 / 60 / 24;
				}
			}
			
			protected override function enableSectionJ(enabled:Boolean):void
			{
				enableTab(dischargeTab,enabled);
				if(enabled)
				{
					//Skip based on answer in intake DCI, since gender question not asked in followup
					if(global.intakeInterview.data.source["Gender"] != 0)
						livingForm.qPregnant.enable();
					else
						livingForm.qPregnant.disable();
					
					//The followup date cannot be before the intake date
					var dv:DateAgeValidator = recordForm.qInterviewDate.validator as DateAgeValidator;
					dv.max = 1 + (new Date().time - DateField.stringToDate(global.intakeInterview.date,"MM/DD/YYYY").time) / 1000 / 60 / 60 / 24;
				}
				dischargeForm.qDischargeDate.validator.enabled = enabled;
			}
			
			protected override function checkModalityChange(currentForm:InterviewForm):void
			{
				//if doing intake, check if Services1 tab chose a new modality
				if(currentForm == services1Form)
				{
					var modality:int = InterviewType.INTAKE_NEG;
					if(services1Form.qSvcReferralToTreatment.answer == "Yes" || services1Form.qSvcBriefTreatment.answer == "Yes")
						modality = InterviewType.INTAKE_RT;
					else if(services1Form.qSvcBriefIntervention.answer == "Yes")
						modality = InterviewType.INTAKE_BI;
					
					//if the modality changed, change tabs
					if(interviewType != modality)
					{
						interviewType = modality;
						if(interviewType == InterviewType.INTAKE_NEG)
						{
							enableSectionB(false);
							enableSectionCtoG(false);
						}
						else if(interviewType == InterviewType.INTAKE_BI)
						{
							enableSectionB(true);
							enableSectionCtoG(false);
						}
						else if(interviewType == InterviewType.INTAKE_RT)
						{
							enableSectionB(true);
							enableSectionCtoG(true);
						}
						determineActiveTabs();
					}
				}
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>

</pages:InstrumentPage>

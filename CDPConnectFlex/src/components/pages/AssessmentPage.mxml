<?xml version="1.0" encoding="utf-8"?>
<s:NavigatorContent xmlns:fx="http://ns.adobe.com/mxml/2009" 
					xmlns:s="library://ns.adobe.com/flex/spark" 
					xmlns:mx="library://ns.adobe.com/flex/mx" width="400" height="300" xmlns:assessment="components.assessment.*"
					xmlns:assessmentservice="services.assessmentservice.*">
	<fx:Script>
		<![CDATA[
			import components.assessment.AssessType;
			import components.assessment.AuditForm;
			import components.assessment.Dast10Form;
			import components.assessment.Phq9Form;
			import components.assessment.PrescreenForm;
			import components.assessment.QuestionForm;
			import components.dci.DCIForm;
			
			import mx.collections.ArrayCollection;
			import mx.collections.ArrayList;
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			import mx.rpc.events.ResultEvent;
			
			import valueObjects.AssessmentVO;
			
			protected var global:CDPConnectFlex = FlexGlobals.topLevelApplication as CDPConnectFlex;
			
			private var activeForm:QuestionForm;
			private var constructedForms:ArrayCollection = new ArrayCollection([null,new PrescreenForm(),new AuditForm(),new Dast10Form(),new Phq9Form()]);
			
			public var currentType:int;
			
			/**
			 * Set up this page with the given type of assessment.
			 * 1. Remove old form from page.
			 * 2. Initialize new form (either constructing or resetting).
			 * 3. Add new form to page.
			 * 4. If loading an assessment, populate the data.
			 * */
			public function initAssessment(type:int):void
			{
				//If there's already a form displayed, remove it
				if(activeForm != null)
					removeElement(activeForm);
				
				currentType = type;
				activeForm = constructedForms.getItemAt(type) as QuestionForm;
				activeForm.initForm();
				addElement(activeForm);
				
				//if we are loading an assessment, populate the data
				if(global.activeAssessment != null)
				{
					activeForm.loadData(global.activeAssessment.data.source);
					activeForm.doAllSkips();
					activeForm.validateForm();
				}
			}
			
			public function saveAssessment():void
			{
				var errors:Array = activeForm.validateForm();
				if(errors.length > 0)
				{
					Alert.show(errors.join("\n"),"Validation Errors");
				}
				//Create
				else if(global.activeAssessment == null)
				{
					global.activeAssessment = new AssessmentVO();
					global.activeAssessment.episode_autoid = global.activeEpisode.autoid;
					global.activeAssessment.type = currentType;
					global.activeAssessment.date = global.dateFormatter.format(new Date());
					global.activeAssessment.complete = 1;
					global.activeAssessment.data = activeForm.saveData(new Array());
					createAssessmentResult.token = assessmentService.createAssessment(global.activeAssessment);
				}
				else //Update
				{
					//Preserve the autoids when saving
					var data_autoid:int = global.activeAssessment.data.source["autoid"];
					var assessment_autoid:int = global.activeAssessment.data.source["assessment_autoid"];
					var res:Array = activeForm.saveData(new Array());
					res["autoid"] = data_autoid;
					res["assessment_autoid"] = assessment_autoid;
					global.activeAssessment.data = res;
					updateAssessmentDataResult.token = assessmentService.updateAssessmentData(global.activeAssessment);
				}
			}
			
			protected function createAssessmentResult_resultHandler(event:ResultEvent):void
			{
				Alert.show("Assessment saved.");
				//Add in new autoid and put in assessments grid
				global.activeAssessment = createAssessmentResult.lastResult;
				global.pageClient.assessmentGroup.assessmentList.addItem(global.activeAssessment);
			}
			
			protected function updateAssessmentResult_resultHandler(event:ResultEvent):void
			{
				Alert.show("Assessment updated.");
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<s:CallResponder id="createAssessmentResult" result="createAssessmentResult_resultHandler(event)"/>
		<assessmentservice:AssessmentService id="assessmentService"
											 fault="Alert.show(event.fault.faultString + '\n' + event.fault.faultDetail)"
											 showBusyCursor="true"/>
		<s:CallResponder id="updateAssessmentDataResult" result="updateAssessmentResult_resultHandler(event)"/>
	</fx:Declarations>
</s:NavigatorContent>

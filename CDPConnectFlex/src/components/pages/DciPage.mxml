<?xml version="1.0" encoding="utf-8"?>
<s:NavigatorContent xmlns:fx="http://ns.adobe.com/mxml/2009"
					xmlns:s="library://ns.adobe.com/flex/spark"
					xmlns:mx="library://ns.adobe.com/flex/mx"
					xmlns:custom="components.*"
					xmlns:gpraservice="services.gpraservice.*"
					xmlns:styles="com.adobe.fiber.styles.*"
					xmlns:clientservice="services.clientservice.*"
					xmlns:dci="components.dci.*"
					xmlns:assessmentservice="services.assessmentservice.*"
					width="715" height="600">
	<fx:Script>
		<![CDATA[
			import com.adobe.serializers.utility.TypeUtility;
			
			import components.assessment.AssessType;
			import components.dci.DCIForm;
			import components.dci.InterviewType;
			import components.questions.QuestionClass;
			import components.questions.QuestionList;
			import components.questions.QuestionText;
			import components.questions.QuestionTextRefusable;
			import components.skips.SkipPattern;
			import components.validators.DateAgeValidator;
			
			import mx.collections.ArrayCollection;
			import mx.collections.ArrayList;
			import mx.controls.Alert;
			import mx.controls.DateField;
			import mx.controls.tabBarClasses.Tab;
			import mx.core.FlexGlobals;
			import mx.events.CloseEvent;
			import mx.events.ValidationResultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.validators.ValidationResult;
			
			import valueObjects.AssessmentVO;
			import valueObjects.ClientVO;
			
			protected var questionDict:Dictionary = new Dictionary();
			
			protected var global:CDPConnectFlex = FlexGlobals.topLevelApplication as CDPConnectFlex;
			protected var dciForms:Array = new Array();
			protected var dciTabs:Array = new Array();
			protected var tabButtons:Array = new Array();
			protected var activeTabIndexes:Array = new Array();
			protected var activeFormIndexes:Array = new Array();
			protected var created:Boolean = false;
			public var interviewType:int;
			public var intakeDCI:AssessmentVO;
			public var intakeExists:Boolean = false;
			public var followupExists:Boolean = false;
			public var dischargeExists:Boolean = false;
			
			public function initializePage(type:int):void
			{				
				interviewType = type;
				//Hide old page
				if(viewStack.selectedIndex != 0)
				{
					var oldPage:Object = viewStack.selectedChild;
					viewStack.selectedIndex = 0;
					oldPage.visible = false;
				}
				validationTextArea.text = "";
				
				if(!created)
				{
					dciForms = new Array(recordForm,sbirtForm,services1Form,services2Form,demoForm,demo2Form,military1Form,military2Form,drugForm,drug2Form,livingForm,employmentForm,
						crimeForm,health1Form,health2Form,health3Form,health4Form,health5Form,socialForm,followupForm,dischargeForm,dischargeServices1Form,dischargeServices2Form);
					dciTabs = new Array(recordTab,sbirtTab,services1Tab,services2Tab,demoTab,demo2Tab,military1Tab,military2Tab,drugTab,drug2Tab,livingTab,employmentTab,
						crimeTab,health1Tab,health2Tab,health3Tab,health4Tab,health5Tab,socialTab,followupTab,dischargeTab,dischargeServices1Tab,dischargeServices2Tab,saveTab);

					for each(var btmp:Tab in tabBar.getChildren())
						tabButtons.push(btmp);
					created = true;
				}
				
				recordForm.initForm();
				
				if(type == InterviewType.INTAKE_SBIRT_NEG)
				{
					enableSectionSBIRT(true);
					enableSectionA(true);
					enableSectionB(false);
					enableSectionCtoG(false);
					enableSectionI(false);
					enableSectionJ(false);
					enableSectionK(false);
				}
				else if(type == InterviewType.INTAKE_SBIRT_BI)
				{
					enableSectionSBIRT(true);
					enableSectionA(true);
					enableSectionB(true);
					enableSectionCtoG(false);
					enableSectionI(false);
					enableSectionJ(false);
					enableSectionK(false);
				}
				else if(type == InterviewType.INTAKE_SBIRT_RT)
				{
					enableSectionSBIRT(true);
					enableSectionA(true);
					enableSectionB(true);
					enableSectionCtoG(true);
					enableSectionI(false);
					enableSectionJ(false);
					enableSectionK(false);
				}
				else if(type == InterviewType.INTAKE_GENERAL)
				{
					enableSectionSBIRT(false);
					enableSectionA(true);
					enableSectionB(true);
					enableSectionCtoG(true);
					enableSectionI(false);
					enableSectionJ(false);
					enableSectionK(false);
				}
				else if(type == InterviewType.FOLLOWUP)
				{
					enableSectionSBIRT(false);
					enableSectionA(false);
					enableSectionB(true);
					enableSectionCtoG(true);
					enableSectionI(true);
					enableSectionJ(false);
					enableSectionK(true);
				}
				else if(type == InterviewType.FOLLOWUP_SBIRT_BI)
				{
					enableSectionSBIRT(false);
					enableSectionA(false);
					enableSectionB(true);
					enableSectionCtoG(false);
					enableSectionI(true);
					enableSectionJ(false);
					enableSectionK(true);
				}
				else if(type == InterviewType.DISCHARGE)
				{
					enableSectionSBIRT(false);
					enableSectionA(false);
					enableSectionB(true);
					enableSectionCtoG(true);
					enableSectionI(false);
					enableSectionJ(true);
					enableSectionK(true);
				}
				else if(type == InterviewType.DISCHARGE_NO_INTERVIEW)
				{
					enableSectionSBIRT(false);
					enableSectionA(false);
					enableSectionB(false);
					enableSectionCtoG(false);
					enableSectionI(false);
					enableSectionJ(true);
					enableSectionK(true);
					dischargeForm.qDischargeDate.answer = global.dateFormatter.format(new Date());
					dischargeForm.qLastServiceDate.answer = global.dateFormatter.format(new Date());
				}
				
				//Determine which items are active
				activeTabIndexes = new Array();
				activeFormIndexes = new Array();
				for(var i:int = 0; i < tabButtons.length; i++)
				{
					if(tabButtons[i].visible)
					{
						activeTabIndexes.push(i);
						if(i < dciForms.length)
							activeFormIndexes.push(i);
					}
				}
				
				//If loading a DCI
				if(global.activeAssessment != null)
				{
					//Load data
					for each(i in activeFormIndexes)
						(dciForms[i] as DCIForm).loadData(global.activeAssessment.data.source);
					
					//Then process skips
					for each(i in activeFormIndexes)
						(dciForms[i] as DCIForm).doAllSkips();
						
					//Then validate
					for each(i in activeFormIndexes)
						(dciForms[i] as DCIForm).validateForm();
				}
				
				//Reorder all tab buttons so that the invisible ones are at the bottom
				//Have to reorder the tabs in the viewstack to correspond to the new order too though
				var index:int = 0;
				for each(i in activeTabIndexes)
				{
					viewStack.setChildIndex(dciTabs[i],index);
					index++;
				}
			}
			
			protected function enableTab(tab:NavigatorContent, enabled:Boolean):void
			{
				(tabButtons[dciTabs.indexOf(tab)] as Tab).visible = enabled;
			}
			
			protected function enableSectionSBIRT(enabled:Boolean):void
			{
				sbirtForm.initForm();
				enableTab(sbirtTab,enabled);
			}
			
			protected function enableSectionA(enabled:Boolean):void
			{
				services1Form.initForm();
				services2Form.initForm();
				demoForm.initForm();
				demo2Form.initForm();
				military1Form.initForm();
				military2Form.initForm();
				
				enableTab(services1Tab,enabled);
				enableTab(services2Tab,enabled);
				enableTab(demoTab,enabled);
				enableTab(demo2Tab,enabled);
				enableTab(military1Tab,enabled);
				enableTab(military2Tab,enabled);
				
				if(enabled)
				{
					var dv:DateAgeValidator = recordForm.qInterviewDate.validator as DateAgeValidator;
					dv.max = 365;
				}
				
				demoForm.qDateOfBirth.validator.enabled = enabled;
				demoForm.qDateOfBirth.answer = global.activeClient.dob;
				demo2Form.qGender.setAnswerIndex(global.activeClient.gender);
				demo2Form.qGender.refreshSkips();
			}
			
			protected function enableSectionB(enabled:Boolean):void
			{
				drugForm.initForm();
				drug2Form.initForm();
				enableTab(drugTab,enabled);
				enableTab(drug2Tab,enabled);
			}
			
			protected function enableSectionCtoG(enabled:Boolean):void
			{
				livingForm.initForm();
				employmentForm.initForm();
				crimeForm.initForm();
				health1Form.initForm();
				health2Form.initForm();
				health3Form.initForm();
				health4Form.initForm();
				health5Form.initForm();
				socialForm.initForm();
				
				enableTab(livingTab,enabled);
				enableTab(employmentTab,enabled);
				enableTab(crimeTab,enabled);
				enableTab(health1Tab,enabled);
				enableTab(health2Tab,enabled);
				enableTab(health3Tab,enabled);
				enableTab(health4Tab,enabled);
				enableTab(health5Tab,enabled);
				enableTab(socialTab,enabled);
			}
			
			protected function enableSectionK(enabled:Boolean):void
			{
				dischargeServices1Form.initForm();
				dischargeServices2Form.initForm();
				enableTab(dischargeServices1Tab,enabled);
				enableTab(dischargeServices2Tab,enabled);
			}
			
			protected function enableSectionI(enabled:Boolean):void
			{
				followupForm.initForm();
				enableTab(followupTab,enabled);
				if(enabled)
				{
					//Skip based on answer in intake DCI, since gender question not asked in followup
					if(intakeDCI.data.source["Gender"] != 0)
						livingForm.qPregnant.enable();
					else
						livingForm.qPregnant.disable();
					
					//The followup date cannot be before the intake date
					var dv:DateAgeValidator = recordForm.qInterviewDate.validator as DateAgeValidator;
					dv.max = 1 + (new Date().time - DateField.stringToDate(intakeDCI.date,"MM/DD/YYYY").time) / 1000 / 60 / 60 / 24;
				}
			}
			
			protected function enableSectionJ(enabled:Boolean):void
			{
				dischargeForm.initForm();
				enableTab(dischargeTab,enabled);
				if(enabled)
				{
					//Skip based on answer in intake DCI, since gender question not asked in followup
					if(intakeDCI.data.source["Gender"] != 0)
						livingForm.qPregnant.enable();
					else
						livingForm.qPregnant.disable();
					
					//The followup date cannot be before the intake date
					var dv:DateAgeValidator = recordForm.qInterviewDate.validator as DateAgeValidator;
					dv.max = 1 + (new Date().time - DateField.stringToDate(intakeDCI.date,"MM/DD/YYYY").time) / 1000 / 60 / 60 / 24;
				}
				dischargeForm.qDischargeDate.validator.enabled = enabled;
			}
			
			/**
			 * Save DCI
			 * 1. Validate for errors
			 * 2. Save each active form's data
			 * */
			protected function saveButton_clickHandler(event:MouseEvent):void
			{
				//Validate all active pages
				var results:Array = new Array();
				for each(var i:int in activeFormIndexes)
				{
					var tmpResults:Array = (dciForms[i] as DCIForm).validateForm();
					for(var j:int = 0; j < tmpResults.length; j++)
						results.push(tmpResults[j]);
				}
				
				if(results.length > 0)
				{
					validationTextArea.text = results.join("\n");
					Alert.show("Correct the errors shown in the area below and then click 'Save' again.","DCI NOT SAVED"); 
				}
				else
				{
					validationTextArea.text = "";
					parseForm();
				}
			}
			
			//Parse Form Data, construct Assessment data
			protected function parseForm():void
			{
				var data:Array = new Array();
				
				for each(var i:int in activeFormIndexes)
				{
					data = (dciForms[i] as DCIForm).saveData(data);
				}
				
				//Add in other fields
				data["client_autoid"] = global.activeClient.autoid;
				
				//If doing discharge or followup, get gender from the intake
				if(!isIntake(interviewType))
				{
					data["Gender"] = intakeDCI.data.source["Gender"];
					data["IntakeDate"] = intakeDCI.data.source["InterviewDate"];
				}
				
				//Create
				if(global.activeAssessment == null)
				{
					global.activeAssessment = new AssessmentVO();
					global.activeAssessment.episode_autoid = global.activeEpisode.autoid;
					global.activeAssessment.type = AssessType.DCI;
					global.activeAssessment.subtype = interviewType;
					global.activeAssessment.date = global.dateFormatter.format(new Date());
					global.activeAssessment.complete = 1;
					global.activeAssessment.data = data;
					createAssessmentResult.token = assessmentService.createAssessment(global.activeAssessment);
				}
				else //Update
				{
					//Preserve the autoids when saving
					var data_autoid:int = global.activeAssessment.data.source["autoid"];
					var assessment_autoid:int = global.activeAssessment.data.source["assessment_autoid"];
					data["autoid"] = data_autoid;
					data["assessment_autoid"] = assessment_autoid;
					global.activeAssessment.data = data;
					updateAssessmentDataResult.token = assessmentService.updateAssessmentData(global.activeAssessment);
				}
			}
			
			protected function createAssessmentResult_resultHandler(event:ResultEvent):void
			{
				Alert.show("DCI saved.");
				//Add in new autoid and put in assessments grid
				global.activeAssessment = createAssessmentResult.lastResult;
				global.pageClient.assessmentGroup.assessmentList.addItem(global.activeAssessment);
				
				if(isIntake(interviewType))
				{
					intakeExists = true;
					intakeDCI = global.activeAssessment;
					
					//Check if client is followup eligible, must be a positive first
					if(interviewType == InterviewType.INTAKE_SBIRT_BI || interviewType == InterviewType.INTAKE_SBIRT_RT)
						checkFollowupEligibilityResult.token = assessmentService.checkFollowupEligibility();
				}
				else if(isDischarge(interviewType))
					dischargeExists = true;
				else if(isFollowup(interviewType))
					followupExists = true;
				
				global.rulesManager.dciCreated();
			}
			
			protected function updateAssessmentResult_resultHandler(event:ResultEvent):void
			{
				Alert.show("DCI updated.");
			}
			
			protected function checkFollowupEligibilityResult_resultHandler(event:ResultEvent):void
			{
				if(checkFollowupEligibilityResult.lastResult)
					Alert.show("Is the client willing to participate in follow-up?","Client is Follow-Up Eligible",Alert.YES|Alert.NO,null,agreeToFollowup);
			}
			
			protected function agreeToFollowup(ev:CloseEvent):void
			{
				if(ev.detail == Alert.YES)
				{
					setFollowupSelectedResult.token = assessmentService.setFollowupSelected(global.activeAssessment.data.source["autoid"]);
				}
			}
			protected function setFollowupSelectedResult_resultHandler(event:ResultEvent):void
			{
				Alert.show("Client has been selected for followup. Collect contact information.");
			}
			
			protected function headerButton_clickHandler(event:MouseEvent):void
			{
				var output:String = "";
				var file:FileReference = new FileReference();
				
				for each(var form:DCIForm in dciForms)
				{
					//get each question code from each form
					for each(var q:QuestionClass in form.questions)
						output += q.codeName + "," + q.className + "," + q.answerType.toString() + "\r\n";
				}
				file.save(output,"CodeNames.csv");
			}
			
			public function isIntake(subtype:int):Boolean
			{
				return subtype == InterviewType.INTAKE_GENERAL || subtype == InterviewType.INTAKE_SBIRT_BI || subtype == InterviewType.INTAKE_SBIRT_NEG || subtype == InterviewType.INTAKE_SBIRT_RT;
			}
			
			public function isDischarge(subtype:int):Boolean
			{
				return subtype == InterviewType.DISCHARGE || subtype == InterviewType.DISCHARGE_NO_INTERVIEW;
			}
			
			public function isFollowup(subtype:int):Boolean
			{
				return subtype == InterviewType.FOLLOWUP || subtype == InterviewType.FOLLOWUP_SBIRT_BI;
			}
		]]>
	</fx:Script>
	<fx:Declarations>
		<assessmentservice:AssessmentService id="assessmentService"
											 fault="Alert.show(event.fault.faultString + '\n' + event.fault.faultDetail)"
											 showBusyCursor="true"/>
		<s:CallResponder id="createAssessmentResult" result="createAssessmentResult_resultHandler(event)"/>
		<s:CallResponder id="updateAssessmentDataResult" result="updateAssessmentResult_resultHandler(event)"/>
		<s:CallResponder id="checkFollowupEligibilityResult" result="checkFollowupEligibilityResult_resultHandler(event)"/>
		<s:CallResponder id="setFollowupSelectedResult" result="setFollowupSelectedResult_resultHandler(event)"/>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<mx:TabBar id="tabBar" x="0" y="0" dataProvider="viewStack"
			   direction="vertical"/>
	<mx:ViewStack id="viewStack" x="105" y="0" width="603" height="650"
				  backgroundColor="#EAEAEA" creationPolicy="all" dropShadowVisible="true">
		<s:NavigatorContent id="recordTab" width="100%" height="100%" label="Record">
			<dci:RecordForm id="recordForm"/>
		</s:NavigatorContent>
		<s:NavigatorContent id="sbirtTab" width="100%" height="100%" label="SBIRT">
			<dci:SBIRTForm id="sbirtForm"/>
		</s:NavigatorContent>
		<s:NavigatorContent id="services1Tab" width="100%" height="100%" label="Services1">
			<dci:Services1Form id="services1Form"/>
		</s:NavigatorContent>
		<s:NavigatorContent id="services2Tab" width="100%" height="100%" label="Services2">
			<dci:Services2Form id="services2Form"/>
		</s:NavigatorContent>
		<s:NavigatorContent id="demoTab" width="100%" height="100%" label="Demographic">
			<dci:DemographicsForm id="demoForm"/>
		</s:NavigatorContent>
		<s:NavigatorContent id="demo2Tab" width="100%" height="100%" label="Demographic2">
			<dci:Demographics2Form id="demo2Form"/>
		</s:NavigatorContent>
		<s:NavigatorContent id="military1Tab" width="100%" height="100%" label="Military1">
			<dci:Military1Form id="military1Form" />
		</s:NavigatorContent>
		<s:NavigatorContent id="military2Tab" width="100%" height="100%" label="Military2">
			<dci:Military2Form id="military2Form"/>
		</s:NavigatorContent>
		<s:NavigatorContent id="drugTab" width="100%" height="100%" label="Drug1">
			<dci:DrugForm id="drugForm" />
		</s:NavigatorContent>
		<s:NavigatorContent id="drug2Tab" width="100%" height="100%" label="Drug2">
			<dci:Drug2Form id="drug2Form" />
		</s:NavigatorContent>
		<s:NavigatorContent id="livingTab" width="100%" height="100%" label="Living">
			<dci:LivingForm id="livingForm" />
		</s:NavigatorContent>
		<s:NavigatorContent id="employmentTab" width="100%" height="100%" label="Employment">
			<dci:EmploymentForm id="employmentForm" />
		</s:NavigatorContent>
		<s:NavigatorContent id="crimeTab" width="100%" height="100%" label="Crime">
			<dci:CrimeForm id="crimeForm" />
		</s:NavigatorContent>
		<s:NavigatorContent id="health1Tab" width="100%" height="100%" label="Health1">
			<dci:Health1Form id="health1Form" />
		</s:NavigatorContent>
		<s:NavigatorContent id="health2Tab" width="100%" height="100%" label="Health2">
			<dci:Health2Form id="health2Form" />
		</s:NavigatorContent>
		<s:NavigatorContent id="health3Tab" width="100%" height="100%" label="Health3">
			<dci:Health3Form id="health3Form" />
		</s:NavigatorContent>
		<s:NavigatorContent id="health4Tab" width="100%" height="100%" label="Health4">
			<dci:Health4Form id="health4Form" />
		</s:NavigatorContent>
		<s:NavigatorContent id="health5Tab" width="100%" height="100%" label="Health5">
			<dci:Health5Form id="health5Form" />
		</s:NavigatorContent>
		<s:NavigatorContent id="socialTab" width="100%" height="100%" label="Social">
			<dci:SocialForm id="socialForm" />
		</s:NavigatorContent>
		<s:NavigatorContent id="followupTab" width="100%" height="100%" label="Followup">
			<dci:FollowupForm id="followupForm" />
		</s:NavigatorContent>
		<s:NavigatorContent id="dischargeTab" width="100%" height="100%" label="Discharge">
			<dci:DischargeForm id="dischargeForm" />
		</s:NavigatorContent>
		<s:NavigatorContent id="dischargeServices1Tab" width="100%" height="100%" label="Services 1">
			<dci:Services1DischargeForm id="dischargeServices1Form" />
		</s:NavigatorContent>
		<s:NavigatorContent id="dischargeServices2Tab" width="100%" height="100%" label="Services 2">
			<dci:Services2DischargeForm id="dischargeServices2Form" />
		</s:NavigatorContent>
		<s:NavigatorContent id="saveTab" width="100%" height="100%" label="Save">
			<s:Button id="saveButton" x="243" y="88" height="56" label="Validate and Save"
					  click="saveButton_clickHandler(event)"/>
			<s:Button id="headerButton" x="200" y="300" label="Get Headers" visible="false"
					  click="headerButton_clickHandler(event)"/>
			<s:Label x="252" y="183" fontWeight="bold" text="Validation Results"/>
			<s:TextArea id="validationTextArea" x="133" y="201" width="341" height="232" editable="false"/>
		</s:NavigatorContent>
	</mx:ViewStack>
</s:NavigatorContent>

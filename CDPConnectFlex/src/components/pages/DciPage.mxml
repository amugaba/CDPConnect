<?xml version="1.0" encoding="utf-8"?>
<s:NavigatorContent xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:custom="components.*"
		 xmlns:gpraservice="services.gpraservice.*"
		 xmlns:styles="com.adobe.fiber.styles.*"
		 xmlns:clientservice="services.clientservice.*"
		 width="400" height="300" xmlns:dci="components.dci.*">
	<fx:Script>
		<![CDATA[
			import components.validators.DateAgeValidator;
			import components.skips.SkipPattern;
			import com.adobe.serializers.utility.TypeUtility;
			
			import components.questions.QuestionClass;
			import components.questions.QuestionList;
			import components.questions.QuestionText;
			import components.questions.QuestionTextRefusable;
			import components.dci.DCIForm;
			import components.dci.InterviewType;
			
			import mx.collections.ArrayCollection;
			import mx.collections.ArrayList;
			import mx.controls.Alert;
			import mx.controls.DateField;
			import mx.core.FlexGlobals;
			import mx.events.ValidationResultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.validators.ValidationResult;
			
			import valueObjects.ClientVO;
			import valueObjects.GpraVO;
			
			protected var questionDict:Dictionary = new Dictionary();
			
			protected var gpraConstructed:Boolean = false;
			protected var global:CDPConnectFlex = FlexGlobals.topLevelApplication as CDPConnectFlex;
			protected var dciForms:Array;
			protected var dciTabs:Array;
			
			protected function resetGPRA():void
			{
				for each(var form:DCIForm in dciForms)
				{
					form.reset();
				}
			}
			
			public function initializeGPRA():void
			{
				if(!gpraConstructed)
				{
					gpraConstructed = true;
					
					/*recordForm.createForm();
					sbirtForm.createForm();
					services1Form.createForm();
					services2Form.createForm();
					demoForm.createForm();
					demo2Form.createForm();
					military1Form.createForm();
					military2Form.createForm();
					drugForm.createForm();
					drug2Form.createForm();
					livingForm.createForm();
					employmentForm.createForm();
					crimeForm.createForm();
					health1Form.createForm();
					health2Form.createForm();
					health3Form.createForm();
					health4Form.createForm();
					health5Form.createForm();
					socialForm.createForm();
					followupForm.createForm();
					dischargeForm.createForm();
					dischargeServices1Form.createForm();
					dischargeServices2Form.createForm();*/
					
					dciForms = new Array(recordForm,sbirtForm,services1Form,services2Form,demoForm,demo2Form,military1Form,military2Form,drugForm,drug2Form,livingForm,employmentForm,
						crimeForm,health1Form,health2Form,health3Form,health4Form,health5Form,socialForm,followupForm,dischargeForm,dischargeServices1Form,dischargeServices2Form);
					
					dciTabs = new Array(recordTab,sbirtTab,services1Tab,services2Tab,demoTab,demo2Tab,military1Tab,military2Tab,drugTab,drug2Tab,livingTab,employmentTab,
						crimeTab,health1Tab,health2Tab,health3Tab,health4Tab,health5Tab,socialTab,followupTab,dischargeTab,dischargeServices1Tab,dischargeServices2Tab);
					
					for each(var f:DCIForm in dciForms)
						f.createForm();
				}
				else
				{
					resetGPRA();
				}
				
				if(global.activeGPRA.type == InterviewType.INTAKE_SBIRT_NEG)
				{
					enableSectionSBIRT(true);
					enableSectionA(true);
					enableSectionB(false);
					enableSectionCtoG(false);
					enableSectionI(false);
					enableSectionJ(false);
					enableSectionK(false);
				}
				else if(global.activeGPRA.type == InterviewType.INTAKE_SBIRT_BI)
				{
					enableSectionSBIRT(true);
					enableSectionA(true);
					enableSectionB(true);
					enableSectionCtoG(false);
					enableSectionI(false);
					enableSectionJ(false);
					enableSectionK(false);
				}
				else if(global.activeGPRA.type == InterviewType.INTAKE_SBIRT_RT)
				{
					enableSectionSBIRT(true);
					enableSectionA(true);
					enableSectionB(true);
					enableSectionCtoG(true);
					enableSectionI(false);
					enableSectionJ(false);
					enableSectionK(false);
				}
				else if(global.activeGPRA.type == InterviewType.INTAKE_GENERAL)
				{
					enableSectionSBIRT(false);
					enableSectionA(true);
					enableSectionB(true);
					enableSectionCtoG(true);
					enableSectionI(false);
					enableSectionJ(false);
					enableSectionK(false);
				}
				else if(global.activeGPRA.type == InterviewType.FOLLOWUP)
				{
					enableSectionSBIRT(false);
					enableSectionA(false);
					enableSectionB(true);
					enableSectionCtoG(true);
					enableSectionI(true);
					enableSectionJ(false);
					enableSectionK(true);
				}
				else if(global.activeGPRA.type == InterviewType.FOLLOWUP_SBIRT_BI)
				{
					enableSectionSBIRT(false);
					enableSectionA(false);
					enableSectionB(true);
					enableSectionCtoG(false);
					enableSectionI(true);
					enableSectionJ(false);
					enableSectionK(true);
				}
				else if(global.activeGPRA.type == InterviewType.DISCHARGE)
				{
					enableSectionSBIRT(false);
					enableSectionA(false);
					enableSectionB(true);
					enableSectionCtoG(true);
					enableSectionI(false);
					enableSectionJ(true);
					enableSectionK(true);
				}
				else if(global.activeGPRA.type == InterviewType.DISCHARGE_NO_INTERVIEW)
				{
					enableSectionSBIRT(false);
					enableSectionA(false);
					enableSectionB(false);
					enableSectionCtoG(false);
					enableSectionI(false);
					enableSectionJ(true);
					enableSectionK(true);
				}
				
				//validateGPRA();
				viewStack.selectedChild = recordTab;
			}
			
			protected function enableSectionSBIRT(enabled:Boolean):void
			{
				sbirtForm.enableForm(enabled);
				enableTab(sbirtTab,enabled);
			}
			
			protected function enableTab(tab:NavigatorContent, enabled:Boolean):void
			{
				if(enabled)
				{
					viewStack.addChildAt(tab,Math.min(dciTabs.indexOf(tab),viewStack.numChildren));
				}
				else
				{
					if(viewStack.contains(tab))
						viewStack.removeChild(tab);
				}
			}
			
			protected function enableSectionB(enabled:Boolean):void
			{
				drugForm.enableForm(enabled);
				drug2Form.enableForm(enabled);
				enableTab(drugTab,enabled);
				enableTab(drug2Tab,enabled);
			}
			
			protected function enableSectionCtoG(enabled:Boolean):void
			{
				enableTab(livingTab,enabled);
				enableTab(employmentTab,enabled);
				enableTab(crimeTab,enabled);
				enableTab(health1Tab,enabled);
				enableTab(health2Tab,enabled);
				enableTab(health3Tab,enabled);
				enableTab(health4Tab,enabled);
				enableTab(health5Tab,enabled);
				enableTab(socialTab,enabled);
			}
			
			protected function enableSectionK(enabled:Boolean):void
			{
				enableTab(dischargeServices1Tab,enabled);
				enableTab(dischargeServices2Tab,enabled);
			}
			
			protected function enableSectionA(enabled:Boolean):void
			{
				services1Form.enableForm(enabled);
				services2Form.enableForm(enabled);
				demoForm.enableForm(enabled);
				demo2Form.enableForm(enabled);
				military1Form.enableForm(enabled);
				military2Form.enableForm(enabled);
				
				enableTab(services1Tab,enabled);
				enableTab(services2Tab,enabled);
				enableTab(demoTab,enabled);
				enableTab(demo2Tab,enabled);
				enableTab(military1Tab,enabled);
				enableTab(military2Tab,enabled);
				
				if(enabled)
				{
					var dv:DateAgeValidator = recordForm.qInterviewDate.validator as DateAgeValidator;
					dv.max = 365;
				}

				demoForm.qDateOfBirth.validator.enabled = enabled;
			}
			
			protected function enableSectionI(enabled:Boolean):void
			{
				enableTab(followupTab,enabled);
				if(enabled)
				{
					//Skip based on answer in intake DCI, since gender question not asked in followup
					if(global.activeClient.intake.data.source["Gender"] != 1)
						livingForm.qPregnant.enable();
					
					//The followup date cannot be before the intake date
					var dv:DateAgeValidator = recordForm.qInterviewDate.validator as DateAgeValidator;
					dv.max = (new Date().time - DateField.stringToDate(global.activeClient.intake.date,"MM/DD/YYYY").time) / 1000 / 60 / 60 / 24;
				}
			}
			
			protected function enableSectionJ(enabled:Boolean):void
			{
				enableTab(dischargeTab,enabled);
				if(enabled)
				{
					//Skip based on answer in intake DCI, since gender question not asked in followup
					if(global.activeClient.intake.data.source["GenderCode"] != 1)
						livingForm.qPregnant.enable();
					
					//The followup date cannot be before the intake date
					var dv:DateAgeValidator = recordForm.qInterviewDate.validator as DateAgeValidator;
					dv.max = 1 + (new Date().time - DateField.stringToDate(global.activeClient.intake.date,"MM/DD/YYYY").time) / 1000 / 60 / 60 / 24;
				}
				dischargeForm.qDischargeDate.validator.enabled = enabled;
			}
			
			
			//Read GPRAVO, populate forms
			public function populateForm(gpra:ArrayCollection):void
			{
				var gpraVO:Array = gpra.source;
				var answer:String;
				var answerNum:Number;
				for each(var q:QuestionClass in questionDict)
				{
					if(["ServiceMemRelationship","ServiceMemExpOther","ServiceMemExpDeployed","ServiceMemExpInjured","ServiceMemExpCombatStress","ServiceMemExpDeceased"].indexOf(q.codeName) != -1)
						continue;
					answer = gpraVO[q.codeName];
					answerNum = parseInt(answer);
					if(q is QuestionTextRefusable)
					{
						var qr:QuestionTextRefusable = q as QuestionTextRefusable;
						if(answerNum == -1)
							q.disable(); //question is being skipped, put -1 for N/A, this may not be necessary
						else if(answerNum < -6)
							qr.refuseInput.selectedIndex = -6 - answerNum; //put -7 for Refused, -8 for DK, -9 for MI
						else
						{
							q.answer = answer;
							qr.refuseInput.selectedIndex = 0;
						}
						qr.refusedHandler(null);
					}
					else if(q is QuestionText)
					{
						if(answerNum == -1)
							q.disable(); //question is being skipped, put -1 for N/A
						else
							q.answer = answer;
					}
					else if(q is QuestionList)
					{
						var ql:QuestionList = q as QuestionList;
						if(ql.input.dataProvider.getItemAt(0) == "Yes" && ql.input.dataProvider.getItemAt(1) == "No")
						{
							if(answerNum == 1)
								q.answer = "Yes";
							else if(answerNum == 0)
								q.answer = "No";
						}
						/*else if(["MilitaryServed","ActiveDuty","FamilyActiveDuty","EducationYears","PhysicallyHurt"].indexOf(q.codeName) != -1)
						{
							ql.input.selectedIndex = answerNum; //These codes count up from 0
						}
						else if(q.codeName == "EmployStatus" && answerNum == 0)
						{
							q.answer = "Other";
						}*/
						else if(answerNum > 0)
							ql.input.selectedIndex = answerNum - 1;
						
						if(answerNum == -1)
							q.disable();
						else if(answerNum == -7)
							q.answer = "Refused";
						else if(answerNum == -8)
							q.answer = "Don't Know";
						else if(answerNum == -9)
							q.answer = "Missing Data";	
					}
					for each(var skip:SkipPattern in q.skipPatterns)
						skip.skipHandler(null);
				}
				
				for each(var q2:QuestionClass in questionDict)
				if(q2.validator != null)
					if(!q2.isSkipped && q2.inputControl.enabled)
						q2.validator.validate();
				
				military2Form.familyVeterans = new ArrayList();
				for(var i:Number = 1; i<=6; i++)
				{
					var num:Number = Number(gpraVO["ServiceMemRelationship"+String(i)]);
					if(num > 0)
					{
						var arr:Array = new Array();
						if(num == -9)
							arr.push("Missing Data");
						else
							arr.push(military2Form.qServiceMemRelationship.input.dataProvider.getItemAt(num -1));
						arr.push(gpraVO["ServiceMemExpOther"+String(i)]);
						
						num = gpraVO["ServiceMemExpDeployed"+String(i)];
						if(num == 1)
							arr.push("Yes");
						else if(num == 0)
							arr.push("No");
						else
							arr.push(military2Form.qServiceMemExpDeployed.input.dataProvider.getItemAt(-5 - num));
						
						num = gpraVO["ServiceMemExpInjured"+String(i)];
						if(num == 1)
							arr.push("Yes");
						else if(num == 0)
							arr.push("No");
						else
							arr.push(military2Form.qServiceMemExpInjured.input.dataProvider.getItemAt(-5 - num));
						
						num = gpraVO["ServiceMemExpCombatStress"+String(i)];
						if(num == 1)
							arr.push("Yes");
						else if(num == 0)
							arr.push("No");
						else
							arr.push(military2Form.qServiceMemExpCombatStress.input.dataProvider.getItemAt(-5 - num));
						
						num = gpraVO["ServiceMemExpDeceased"+String(i)];
						if(num == 1)
							arr.push("Yes");
						else if(num == 0)
							arr.push("No");
						else
							arr.push(military2Form.qServiceMemExpDeceased.input.dataProvider.getItemAt(-5 - num));
						
						military2Form.familyVeterans.addItem(arr);
					}
				}
				military2Form.updateFamilyValidator();
			}
			
			//Parse Form Data, construct GPRAVO
			protected function parseForm():void
			{
				var gpraData:Array = new Array();
				
				var date:Date = DateField.stringToDate(recordForm.qInterviewDate.answer,"MM/DD/YYYY");
				for(var i:int = 0; i < dciForms.length; i++)
				{
					//if this form isn't active, skip it
					if(!viewStack.contains(dciTabs[i]))
						continue;
					
					var form:DCIForm = dciForms[i];					
					form.saveData(gpraData);
				}
				
				//Add in other fields
				gpraData["client_autoid"] = global.activeClient.autoid;//DB autoid and DCI client ID need to be different
				
				//If doing discharge or followup, get gender from the intake
				if([InterviewType.INTAKE_GENERAL,InterviewType.INTAKE_SBIRT_BI,InterviewType.INTAKE_SBIRT_NEG,InterviewType.INTAKE_SBIRT_RT].indexOf(global.activeGPRA.type) == -1)
				{
					gpraData["Gender"] = global.activeClient.intake.data.source["Gender"];
					gpraData["IntakeDate"] = global.activeClient.intake.date;
				}
				
				saveDCIResult.token = gpraService.saveDCI(-1,gpraData);
			}
			
			protected function saveButton_clickHandler(event:MouseEvent):void
			{
				var results:Array = validateGPRA();
				if(results.length > 0)
				{
					Alert.show(results.join("\n"),"Validation Errors");
				}
				else
					parseForm();
			}
			
			protected function validateGPRA():Array
			{
				var results:Array = new Array();
				var ev:ValidationResultEvent;
				for each(var q:QuestionClass in questionDict)
				{
					if(q.validator != null && q.validator.enabled)
					{
						if(!q.isSkipped && q.inputControl.enabled)
						{
							ev = q.validator.validate();
							if(ev.results != null)
							{
								for each(var vr:ValidationResult in ev.results)
								{
									var s:String = "";
									if(q.owner != null)
										s += ((q.owner as mx.containers.Form).owner as NavigatorContent).label; //q.owner is form, form.owner is navigator panel
									else
										s += (((q.inputControl.owner as QuestionClass).owner as mx.containers.Form).owner as NavigatorContent).label; //inputControl.owner is another question
									s += ": " + q.codeName + " - ";
									s += vr.errorMessage;
									results.push(s);
								}
							}
						}
						else
						{
							var evt:ValidationResultEvent = new ValidationResultEvent(ValidationResultEvent.VALID);
							q.validator.dispatchEvent(evt);
						}
					}
				}
				return results;
			}
			
			protected function headerButton_clickHandler(event:MouseEvent):void
			{
				var output:String = "";
				var file:FileReference = new FileReference();
				
				for each(var form:DCIForm in dciForms)
				{
					//get each question code from each form
					for each(var q:QuestionClass in form.questions)
						output += q.codeName + "," + q.className + "," + q.answerType.toString() + "\r\n";
				}
				file.save(output,"CodeNames.csv");
			}
			
			protected function saveDCIResult_resultHandler(event:ResultEvent):void
			{
				//global.pageClient.populateClientForm();
				var g:GpraVO = new GpraVO();
				if(saveDCIResult.lastResult > 0)
				{
					g.autoid = saveDCIResult.lastResult;
					Alert.show("New GPRA created.");
				}
				else if(saveDCIResult.lastResult == 0)
				{
					//g.autoid = global.activeGPRA.autoid; //this needs to be fixed
					Alert.show("Existing GPRA updated.");
				}
				
				/*g.status = global.activeGPRA.data.source["gpra_status"];
				if(g.status == 1)
				{
				viewStack.selectedChild = recordTab;
				viewStack.removeChild(saveTab);
				}*/
				//g.type = global.activeGPRA.data.source["InterviewTypeCode"];
				//g.date = global.activeGPRA.data.source["InterviewCreateDate"];
				global.activeGPRA = g;
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<gpraservice:GpraService id="gpraService"
								 fault="Alert.show(event.fault.faultString + '\n' + event.fault.faultDetail)"
								 showBusyCursor="true"/>
		<s:CallResponder id="saveDCIResult" result="saveDCIResult_resultHandler(event)"/>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		
	</fx:Declarations>
	
	<mx:TabBar id="tabBar" x="0" y="10" dataProvider="viewStack"
			   direction="vertical"/>
	<mx:ViewStack id="viewStack" x="105" y="10" width="603" height="650"
				  backgroundColor="#EAEAEA" creationPolicy="all" dropShadowVisible="true">
		<s:NavigatorContent id="recordTab" width="100%" height="100%" label="Record">
			<dci:RecordForm id="recordForm"/>
		</s:NavigatorContent>
		<s:NavigatorContent id="sbirtTab" width="100%" height="100%" label="SBIRT">
			<dci:SBIRTForm id="sbirtForm"/>
		</s:NavigatorContent>
		<s:NavigatorContent id="services1Tab" width="100%" height="100%" label="Services1">
			<dci:Services1Form id="services1Form"/>
		</s:NavigatorContent>
		<s:NavigatorContent id="services2Tab" width="100%" height="100%" label="Services2">
			<dci:Services2Form id="services2Form"/>
		</s:NavigatorContent>
		<s:NavigatorContent id="demoTab" width="100%" height="100%" label="Demographic">
			<dci:DemographicsForm id="demoForm"/>
		</s:NavigatorContent>
		<s:NavigatorContent id="demo2Tab" width="100%" height="100%" label="Demographic2">
			<dci:Demographics2Form id="demo2Form"/>
		</s:NavigatorContent>
		<s:NavigatorContent id="military1Tab" width="100%" height="100%" label="Military1">
			<dci:Military1Form id="military1Form" />
		</s:NavigatorContent>
		<s:NavigatorContent id="military2Tab" width="100%" height="100%" label="Military2">
			<dci:Military2Form id="military2Form"/>
		</s:NavigatorContent>
		<s:NavigatorContent id="drugTab" width="100%" height="100%" label="Drug1">
			<dci:DrugForm id="drugForm" />
		</s:NavigatorContent>
		<s:NavigatorContent id="drug2Tab" width="100%" height="100%" label="Drug2">
			<dci:Drug2Form id="drug2Form" />
		</s:NavigatorContent>
		<s:NavigatorContent id="livingTab" width="100%" height="100%" label="Living">
			<dci:LivingForm id="livingForm" />
		</s:NavigatorContent>
		<s:NavigatorContent id="employmentTab" width="100%" height="100%" label="Employment">
			<dci:EmploymentForm id="employmentForm" />
		</s:NavigatorContent>
		<s:NavigatorContent id="crimeTab" width="100%" height="100%" label="Crime">
			<dci:CrimeForm id="crimeForm" />
		</s:NavigatorContent>
		<s:NavigatorContent id="health1Tab" width="100%" height="100%" label="Health1">
			<dci:Health1Form id="health1Form" />
		</s:NavigatorContent>
		<s:NavigatorContent id="health2Tab" width="100%" height="100%" label="Health2">
			<dci:Health2Form id="health2Form" />
		</s:NavigatorContent>
		<s:NavigatorContent id="health3Tab" width="100%" height="100%" label="Health3">
			<dci:Health3Form id="health3Form" />
		</s:NavigatorContent>
		<s:NavigatorContent id="health4Tab" width="100%" height="100%" label="Health4">
			<dci:Health4Form id="health4Form" />
		</s:NavigatorContent>
		<s:NavigatorContent id="health5Tab" width="100%" height="100%" label="Health5">
			<dci:Health5Form id="health5Form" />
		</s:NavigatorContent>
		<s:NavigatorContent id="socialTab" width="100%" height="100%" label="Social">
			<dci:SocialForm id="socialForm" />
		</s:NavigatorContent>
		<s:NavigatorContent id="followupTab" width="100%" height="100%" label="Followup">
			<dci:FollowupForm id="followupForm" />
		</s:NavigatorContent>
		<s:NavigatorContent id="dischargeTab" width="100%" height="100%" label="Discharge">
			<dci:DischargeForm id="dischargeForm" />
		</s:NavigatorContent>
		<s:NavigatorContent id="dischargeServices1Tab" width="100%" height="100%" label="Services 1">
			<dci:Services1DischargeForm id="dischargeServices1Form" />
		</s:NavigatorContent>
		<s:NavigatorContent id="dischargeServices2Tab" width="100%" height="100%" label="Services 2">
			<dci:Services2DischargeForm id="dischargeServices2Form" />
		</s:NavigatorContent>
		<s:NavigatorContent id="saveTab" width="100%" height="100%" label="Save">
			<s:Button id="saveButton" x="200" y="200" label="Validate and Save GPRA"
					  click="saveButton_clickHandler(event)"/>
			<s:Button id="headerButton" x="200" y="300" label="Get Headers"
					  click="headerButton_clickHandler(event)"/>
		</s:NavigatorContent>
	</mx:ViewStack>
</s:NavigatorContent>

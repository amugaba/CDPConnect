<?xml version="1.0" encoding="utf-8"?>
<s:NavigatorContent xmlns:fx="http://ns.adobe.com/mxml/2009"
					xmlns:s="library://ns.adobe.com/flex/spark"
					xmlns:mx="library://ns.adobe.com/flex/mx"
					xmlns:assessmentservice="services.assessmentservice.*"
					width="715" height="700">
	<fx:Script>
		<![CDATA[
			import com.adobe.serializers.utility.TypeUtility;
			
			import components.assessment.AssessType;
			import components.assessment.InterviewForm;
			import components.assessment.InterviewType;
			import components.questions.QuestionClass;
			import components.questions.QuestionList;
			import components.questions.QuestionText;
			import components.questions.QuestionTextRefusable;
			import components.skips.SkipPattern;
			import components.validators.DateAgeValidator;
			
			import mx.collections.ArrayCollection;
			import mx.collections.ArrayList;
			import mx.controls.Alert;
			import mx.controls.DateField;
			import mx.controls.tabBarClasses.Tab;
			import mx.core.FlexGlobals;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.events.ItemClickEvent;
			import mx.events.StateChangeEvent;
			import mx.events.ValidationResultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.validators.ValidationResult;
			
			import valueObjects.AssessmentVO;
			
			protected var questionDict:Dictionary = new Dictionary();
			
			protected var global:CDPConnectFlex = FlexGlobals.topLevelApplication as CDPConnectFlex;
			protected var forms:Array = new Array();
			protected var tabs:Array = new Array();
			protected var tabButtons:Array = new Array();
			public var activeTabs:Vector.<NavigatorContent> = new Vector.<NavigatorContent>();
			public var activeForms:Vector.<InterviewForm> = new Vector.<InterviewForm>();
			
			public var interviewType:int;
			protected var currentIndex:int = 0;//tracks the tab index currently selected
			protected var assessType:int;
			
			protected function initializePage():void
			{
				global.activeInstrument = this;
				//Hide old page
				if(viewStack.selectedIndex != 0)
				{
					var oldPage:Object = viewStack.selectedChild;
					viewStack.selectedIndex = 0;
					oldPage.visible = false;
				}
				validationTextArea.text = "";
				prevButton.enabled = false;
				nextButton.enabled = true;
				currentIndex = 0;
				
				//intialize and reset all forms
				for each(var form:InterviewForm in forms)
					form.initForm();
			}
			
			protected function loadFormsAndTabs():void
			{
				//To be overridden
			}
			
			protected function populateRecordForm():void
			{
				//To be overridden
			}
			
			protected function determineActiveTabs():void
			{
				//Determine which items are active
				activeTabs = new Vector.<NavigatorContent>();
				activeForms = new Vector.<InterviewForm>();
				for(var i:int = 0; i < tabButtons.length; i++)
				{
					if(tabButtons[i].visible)
					{
						activeTabs.push(tabs[i]);
						if(i < forms.length)
							activeForms.push(forms[i]);
					}
				}
				
				//Reorder all tab buttons so that the invisible ones are at the bottom
				//Have to reorder the tabs in the viewstack to correspond to the new order too though
				for(i = 0; i < activeTabs.length; i++)
				{
					viewStack.setChildIndex(activeTabs[i],i);
				}
			}
			
			//Setup a blank Interview form
			public function newIntake():void
			{
				interviewType = InterviewType.INTAKE_NEG;//change this value if user fills out services
				initializePage();
				
				//Enable only section A and SBIRT. Then once the user fills out what services were provided, enabled
				//additional sections based on that modality
				enableSectionSBIRT(true);
				enableSectionA(true);
				enableSectionB(false);
				enableSectionCtoG(false);
				enableSectionI(false);
				enableSectionJ(false);
				enableSectionK(false);
				
				populateRecordForm();
				determineActiveTabs();
				for each(var form:InterviewForm in forms)
				{
					form.doAllSkips();
					form.removeAllErrors();
				}
			}
			
			public function newDischarge():void
			{
				interviewType = InterviewType.DISCHARGE_ADMIN;
				initializePage();
				
				//If discharge, do admin discharge by default. If user selects that an interview was done, add other sections
				enableSectionSBIRT(false);
				enableSectionA(false);
				enableSectionB(false);
				enableSectionCtoG(false);
				enableSectionI(false);
				enableSectionJ(true);
				enableSectionK(true);
				
				populateRecordForm();
				determineActiveTabs();
				for each(var form:InterviewForm in forms)
				{
					form.doAllSkips();
					form.removeAllErrors();
				}
			}
			
			public function newFollowup():void
			{
				if(global.intakeInterview.subtype == InterviewType.INTAKE_BI)
					interviewType = InterviewType.FOLLOWUP_BI;
				else
					interviewType = InterviewType.FOLLOWUP_RT;
				
				initializePage();
				
				//If followup, look at intake interview type to decide between BI and RT followup
				if(interviewType == InterviewType.INTAKE_BI)
				{
					interviewType = InterviewType.FOLLOWUP_BI;
					enableSectionSBIRT(false);
					enableSectionA(false);
					enableSectionB(true);
					enableSectionCtoG(false);
					enableSectionI(true);
					enableSectionJ(false);
					enableSectionK(true);
				}
				else
				{
					interviewType = InterviewType.FOLLOWUP_RT;
					enableSectionSBIRT(false);
					enableSectionA(false);
					enableSectionB(true);
					enableSectionCtoG(true);
					enableSectionI(true);
					enableSectionJ(false);
					enableSectionK(true);
				}
				populateRecordForm();
				determineActiveTabs();
				for each(var form:InterviewForm in forms)
				{
					form.doAllSkips();
					form.removeAllErrors();
				}
			}
			
			public function loadInterview(interview:AssessmentVO):void
			{
				interviewType = interview.subtype;
				initializePage();
				
				//Enable only section A and SBIRT. Then once the user fills out what services were provided, enabled
				//additional sections based on that modality
				if(interview.subtype == InterviewType.INTAKE_NEG)
				{
					enableSectionSBIRT(true);
					enableSectionA(true);
					enableSectionB(false);
					enableSectionCtoG(false);
					enableSectionI(false);
					enableSectionJ(false);
					enableSectionK(false);
				}
				else if(interview.subtype == InterviewType.INTAKE_BI)
				{
					enableSectionSBIRT(true);
					enableSectionA(true);
					enableSectionB(true);
					enableSectionCtoG(false);
					enableSectionI(false);
					enableSectionJ(false);
					enableSectionK(false);
				}
				else if(interview.subtype == InterviewType.INTAKE_RT)
				{
					enableSectionSBIRT(true);
					enableSectionA(true);
					enableSectionB(true);
					enableSectionCtoG(true);
					enableSectionI(false);
					enableSectionJ(false);
					enableSectionK(false);
				}
				else if(interview.subtype == InterviewType.FOLLOWUP_RT)
				{
					enableSectionSBIRT(false);
					enableSectionA(false);
					enableSectionB(true);
					enableSectionCtoG(true);
					enableSectionI(true);
					enableSectionJ(false);
					enableSectionK(true);
				}
				else if(interview.subtype == InterviewType.FOLLOWUP_BI)
				{
					enableSectionSBIRT(false);
					enableSectionA(false);
					enableSectionB(true);
					enableSectionCtoG(false);
					enableSectionI(true);
					enableSectionJ(false);
					enableSectionK(true);
				}
				else if(interview.subtype == InterviewType.DISCHARGE_BI)
				{
					enableSectionSBIRT(false);
					enableSectionA(false);
					enableSectionB(true);
					enableSectionCtoG(true);
					enableSectionI(false);
					enableSectionJ(true);
					enableSectionK(true);
				}
				else if(interview.subtype == InterviewType.DISCHARGE_RT)
				{
					enableSectionSBIRT(false);
					enableSectionA(false);
					enableSectionB(true);
					enableSectionCtoG(true);
					enableSectionI(false);
					enableSectionJ(true);
					enableSectionK(true);
				}
				else if(interview.subtype == InterviewType.DISCHARGE_ADMIN)
				{
					enableSectionSBIRT(false);
					enableSectionA(false);
					enableSectionB(false);
					enableSectionCtoG(false);
					enableSectionI(false);
					enableSectionJ(true);
					enableSectionK(true);
				}
				
				populateRecordForm();
				determineActiveTabs();
				
				//Load data
				for each(var f:InterviewForm in forms)
					f.loadData(global.activeAssessment.data.source);
				
				//Then process skips
				for each(f in forms)
					f.doAllSkips();
				
				//Then validate
				for each(f in forms)
					f.validateForm();
			}
			
			protected function enableTab(tab:NavigatorContent, enabled:Boolean):void
			{
				(tabButtons[tabs.indexOf(tab)] as Tab).visible = enabled;
			}
			
			/**
			 * Override functions section
			 * */
			protected function enableSectionSBIRT(enabled:Boolean):void
			{
				//To be overridden
			}
			
			protected function enableSectionA(enabled:Boolean):void
			{
				//To be overridden
			}
			
			protected function enableSectionB(enabled:Boolean):void
			{
				//To be overridden
			}
			
			protected function enableSectionCtoG(enabled:Boolean):void
			{
				//To be overridden
			}
			
			protected function enableSectionK(enabled:Boolean):void
			{
				//To be overridden
			}
			
			protected function enableSectionI(enabled:Boolean):void
			{
				//To be overridden
			}
			
			protected function enableSectionJ(enabled:Boolean):void
			{
				//To be overridden
			}
			
			/**
			 * Save Interview
			 * 1. Validate for errors
			 * 2. Save each active form's data
			 * */
			protected function saveButton_clickHandler(event:MouseEvent):void
			{
				//Validate all active pages
				var results:Array = new Array();
				for each(var f:InterviewForm in activeForms)
				{
					var tmpResults:ArrayList = f.validateForm();
					for(var j:int = 0; j < tmpResults.length; j++)
						results.push(tmpResults.source[j]);
				}
				
				if(results.length > 0)
				{
					validationTextArea.text = results.join("\n");
					Alert.show("Correct the errors shown in the area below and then click 'Save' again.","INTERVIEW NOT SAVED"); 
				}
				else
				{
					validationTextArea.text = "";
					parseForm();
				}
			}
			
			//Parse Form Data, construct Assessment data
			protected function parseForm():void
			{
				var data:Array = new Array();
				
				for each(var f:InterviewForm in activeForms)
				{
					data = f.saveData(data);
				}
				
				//Add in other fields
				//data["client_autoid"] = global.activeClient.autoid;
				
				//If doing discharge or followup, get gender from the intake
				if(!InterviewType.isIntake(interviewType))
				{
					data["Gender"] = global.intakeInterview.data.source["Gender"];
					data["IntakeDate"] = global.intakeInterview.data.source["InterviewDate"];
				}
				
				//Create
				if(global.activeAssessment == null)
				{
					global.activeAssessment = new AssessmentVO();
					global.activeAssessment.client_autoid = global.activeClient.autoid;
					global.activeAssessment.type = assessType;
					global.activeAssessment.subtype = interviewType;
					global.activeAssessment.date = global.dateFormatter.format(new Date());
					global.activeAssessment.complete = 1;
					global.activeAssessment.data = data;
					createAssessmentResult.token = assessmentService.createAssessment(global.activeAssessment);
				}
				else //Update
				{
					//Preserve the autoids when saving
					var data_autoid:int = global.activeAssessment.data.source["autoid"];
					var assessment_autoid:int = global.activeAssessment.data.source["assessment_autoid"];
					data["autoid"] = data_autoid;
					data["assessment_autoid"] = assessment_autoid;
					global.activeAssessment.data = data;
					global.activeAssessment.subtype = interviewType;
					global.activeAssessment.complete = 1;
					global.activeAssessment.type = assessType;
					updateAssessmentDataResult.token = assessmentService.updateAssessmentData(global.activeAssessment);
				}
			}
			
			protected function createAssessmentResult_resultHandler(event:ResultEvent):void
			{
				Alert.show("Interview saved.");
				//Add in new autoid and put in assessments grid
				global.activeAssessment = createAssessmentResult.lastResult;
				global.pageHome.clientGroup.assessmentList.addItem(global.activeAssessment);
				
				if(InterviewType.isIntake(interviewType))
				{
					global.activeClient.intakeExists = true;
					global.intakeInterview = global.activeAssessment;
				}
				else if(InterviewType.isDischarge(interviewType))
					global.activeClient.dischargeExists = true;
				else if(InterviewType.isFollowup(interviewType))
					global.activeClient.followupExists = true;
			}
			
			protected function updateAssessmentResult_resultHandler(event:ResultEvent):void
			{
				Alert.show("Interview updated.");
			}
			
			protected function headerButton_clickHandler(event:MouseEvent):void
			{
				var output:String = "";
				var file:FileReference = new FileReference();
				
				for each(var form:InterviewForm in forms)
				{
					//get each question code from each form
					for each(var q:QuestionClass in form.questions)
					output += q.codeName + "," + q.className + "," + q.answerType.toString() + "\r\n";
				}
				file.save(output,"CodeNames.csv");
			}
			
			protected function nextButton_clickHandler(event:MouseEvent):void
			{
				if(isCurrentFormValid())
				{
					viewStack.selectedIndex = viewStack.selectedIndex + 1;
					if(viewStack.selectedIndex == activeTabs.length - 1)
						nextButton.enabled = false;
					prevButton.enabled = true;
					currentIndex = viewStack.selectedIndex;
				}
			}
			
			protected function prevButton_clickHandler(event:MouseEvent):void
			{
				if(isCurrentFormValid())
				{
					viewStack.selectedIndex = viewStack.selectedIndex - 1;
					if(viewStack.selectedIndex == 0)
						prevButton.enabled = false;
					nextButton.enabled = true;
					currentIndex = viewStack.selectedIndex;
				}
			}
			
			protected function tabBar_itemClickHandler(event:ItemClickEvent):void
			{
				if(isCurrentFormValid())
				{
					//the tabs can change here if modality is changed, so make sure not to go beyond the last active tab
					viewStack.selectedIndex = Math.min(viewStack.selectedIndex, activeTabs.length -1);
					
					prevButton.enabled = true;
					nextButton.enabled = true;
					if(viewStack.selectedIndex == 0)
						prevButton.enabled = false;
					if(viewStack.selectedIndex == activeTabs.length - 1)
						nextButton.enabled = false;
					currentIndex = viewStack.selectedIndex;
					
					//show errortips on questions in this form
					if(currentIndex < activeForms.length)
					{
						for each(var q:QuestionClass in activeForms[currentIndex].questions)
						{
							if(q.errorToolTip != null)
								q.errorToolTip.visible = true;
						}
					}
				}
				else
					viewStack.selectedIndex = currentIndex;
			}
			
			protected function isCurrentFormValid():Boolean
			{
				if(currentIndex >= activeForms.length)
					return true;//if the current tab is the Save page
				
				var currentForm:InterviewForm = activeForms[currentIndex];
				var errors:ArrayList = currentForm.validateForm();
				if(errors.length != 0)
				{
					Alert.show("Correct the errors on this page before continuing.");
					return false;
				}
				
				checkModalityChange(currentForm);
				
				return true;
			}
			
			protected function checkModalityChange(currentForm:InterviewForm):void
			{
				//To be overriden
			}
			
			protected function viewStack_creationCompleteHandler(event:FlexEvent):void
			{
				loadFormsAndTabs();
				for each(var btmp:Tab in tabBar.getChildren())
					tabButtons.push(btmp);
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<s:CallResponder id="createAssessmentResult" result="createAssessmentResult_resultHandler(event)"/>
		<s:CallResponder id="updateAssessmentDataResult" result="updateAssessmentResult_resultHandler(event)"/>
		<assessmentservice:AssessmentService id="assessmentService"
											 fault="Alert.show(event.fault.faultString + '\n' + event.fault.faultDetail)"
											 showBusyCursor="true"/>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<mx:TabBar id="tabBar" x="0" y="0" dataProvider="viewStack"
			   direction="vertical" itemClick="tabBar_itemClickHandler(event)"/>
	<mx:ViewStack id="viewStack" x="105" y="0" width="603" height="681"
				  backgroundColor="#EAEAEA" creationPolicy="all" dropShadowVisible="true" creationComplete="viewStack_creationCompleteHandler(event)">
		
		<s:NavigatorContent id="saveTab" width="100%" height="100%" label="Save">
			<s:Button id="saveButton" x="243" y="88" height="56" label="Validate and Save"
					  click="saveButton_clickHandler(event)"/>
			<s:Button id="headerButton" x="200" y="300" label="Get Headers" visible="false"
					  click="headerButton_clickHandler(event)"/>
			<s:Label x="252" y="183" fontWeight="bold" text="Validation Results"/>
			<s:TextArea id="validationTextArea" x="133" y="201" width="341" height="232" editable="false"/>
		</s:NavigatorContent>
	</mx:ViewStack>
	<s:Image id="nextButton" x="650" y="630" source="assets/arrow_next_20.png" useHandCursor="true" buttonMode="true" click="nextButton_clickHandler(event)"/>
	<s:Image id="prevButton" x="115" y="630" source="assets/arrow_prev_20.png" useHandCursor="true" buttonMode="true" click="prevButton_clickHandler(event)"/>
</s:NavigatorContent>

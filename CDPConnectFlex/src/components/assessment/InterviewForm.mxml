<?xml version="1.0" encoding="utf-8"?>
<questions:QuestionForm xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" width="100%" height="100%"
		 xmlns:assessment="components.assessment.*" 
		 labelWidth="260" xmlns:questions="components.questions.*">
	<fx:Script>
		<![CDATA[
			import components.pages.DciPage;
			import components.questions.QuestionClass;
			import components.questions.QuestionList;
			import components.questions.QuestionText;
			import components.questions.QuestionTextRefusable;
			import components.skips.SkipMultipleHandler;
			import components.skips.SkipPattern;
			import components.skips.SkipPatternMultiple;
			import components.skips.SkipPatternRange;
			import components.validators.DateAgeValidator;
			import components.validators.DropDownValidator;
			
			import mx.collections.ArrayCollection;
			import mx.collections.ArrayList;
			import mx.controls.HRule;
			import mx.controls.Text;
			import mx.core.FlexGlobals;
			import mx.events.FlexEvent;
			import mx.validators.NumberValidator;
			import mx.validators.ValidationResult;
			import mx.validators.Validator;
			
			import spark.components.NavigatorContent;
			import spark.events.IndexChangeEvent;
			
			protected static var yn:ArrayList = new ArrayList([YES_VALUE,NO_VALUE]);
			protected static var ynrd:ArrayList = new ArrayList([YES_VALUE,NO_VALUE,REFUSED_VALUE,DONT_KNOW_VALUE]);
			protected static var ynr:ArrayList = new ArrayList([YES_VALUE,NO_VALUE,REFUSED_VALUE]);
			protected static var rd:ArrayList = new ArrayList([REFUSED_VALUE,DONT_KNOW_VALUE]);
			
			public static var YES_CODE:int = 1;
			public static var NO_CODE:int = 0;
			public static var REFUSED_CODE:int = -7;
			public static var DONT_KNOW_CODE:int = -8;
			public static var MISSING_CODE:int = -9;
			
			public static var YES_VALUE:String = "Yes";
			public static var NO_VALUE:String = "No";
			public static var REFUSED_VALUE:String = "Refused";
			public static var DONT_KNOW_VALUE:String = "Don't Know";
			public static var MISSING_VALUE:String = "Missing Data";
			
			public var viewstackIndex:int = 0;	

			public override function saveData(gpraData:Array):Array
			{
				for each(var q:QuestionClass in questions)
				{
					//gpraData[q.codeName] = q.answer;
					
					var valInt:int;
					var valString:String;
					
					if(q.isSkipped)
					{
						continue;
					}
					else if(q is QuestionTextRefusable)
					{
						if(q.answerType == int)
							gpraData[q.codeName] = getDBValue_qTextRef_int(q as QuestionTextRefusable)
						else if(q.answerType == String)
							gpraData[q.codeName] = getDBValue_qTextRef_str(q as QuestionTextRefusable)
					}
					else if(q is QuestionText)
					{
						if(q.answerType == int && q.answer.length > 0)
							gpraData[q.codeName] = Number(q.answer);
						else if(q.answerType == String)
							gpraData[q.codeName] = q.answer;
					}
					else if(q is QuestionList)
					{
						gpraData[q.codeName] = getDBValue_qList(q as QuestionList);
					}
				}
				return gpraData;
			}
			
			public override function loadData(data:Array):void
			{
				for each(var q:QuestionClass in questions)
				{
					var valInt:int;
					
					if(data[q.codeName] == null)
					{
						//q.disable(); //skipped //for now treat this as incomplete, see what happens
					}
					else if(q is QuestionTextRefusable)
					{
						var qr:QuestionTextRefusable = q as QuestionTextRefusable;
						
						//Get the value as an integer
						if(data[q.codeName] is String)
							valInt = parseInt(data[q.codeName]);
						else
							valInt = data[q.codeName];
						
						//If the value indicates answer was refused, set refused handler
						if(getRefusedIndexFromValue(valInt) > 0)
						{
							qr.refuseInput.selectedIndex = getRefusedIndexFromValue(valInt);
							qr.refusedHandler(null);
						}
						else
							q.answer = data[q.codeName].toString();
					}
					else if(q is QuestionText)
					{
						q.answer = data[q.codeName].toString();
					}
					else if(q is QuestionList)
					{
						var ql:QuestionList = q as QuestionList;
						
						if(data[q.codeName] is String)
							valInt = parseInt(data[q.codeName]);
						else
							valInt = data[q.codeName];
						
						ql.answer = getValueFromDBIndex(valInt, ql);
					}
				}
			}
			
			private function getDBValue_qTextRef_int(q:QuestionTextRefusable):int
			{				
				if(q.refuseInput.selectedItem == REFUSED_VALUE)
					return REFUSED_CODE;
				else if(q.refuseInput.selectedItem == DONT_KNOW_VALUE)
					return DONT_KNOW_CODE;
				else if(q.refuseInput.selectedItem == MISSING_VALUE)
					return MISSING_CODE;
				else
					return Number(q.answer);
			}
			
			private function getDBValue_qTextRef_str(q:QuestionTextRefusable):String
			{				
				if(q.refuseInput.selectedItem == REFUSED_VALUE)
					return REFUSED_CODE.toString();
				else if(q.refuseInput.selectedItem == DONT_KNOW_VALUE)
					return DONT_KNOW_CODE.toString();
				else if(q.refuseInput.selectedItem == MISSING_VALUE)
					return MISSING_CODE.toString();
				else
					return q.answer;
			}
			
			private function getRefusedIndexFromValue(val:int):int
			{				
				if(val == REFUSED_CODE)
					return 1;
				if(val == DONT_KNOW_CODE)
					return 2;
				if(val == MISSING_CODE)
					return 3;
				return -1;
			}
			
			private function getDBValue_qList(q:QuestionList):int
			{
				if(q.answer == YES_VALUE)
					return YES_CODE;
				else if(q.answer == NO_VALUE)
					return NO_CODE;
				else if(q.answer == REFUSED_VALUE)
					return REFUSED_CODE;
				else if(q.answer == DONT_KNOW_VALUE)
					return DONT_KNOW_CODE;
				else if(q.answer == MISSING_VALUE)
					return MISSING_CODE;
				else
					return q.getAnswerIndex();
			}
			
			private function loadDBValue_qRef_int(q:QuestionTextRefusable, code:int):void
			{
				if(code == REFUSED_CODE)
					q.refuseInput.selectedIndex = 1;
				else if(code == DONT_KNOW_CODE)
					q.refuseInput.selectedIndex = 2;
				else if(code == MISSING_CODE)
					q.refuseInput.selectedIndex = 3;
				else
					q.answer = code.toString();
			}
			
			private function loadDBValue_qRef_str(q:QuestionTextRefusable, val:String):void
			{
				var code:int = parseInt(val);
				if(code == REFUSED_CODE)
					q.refuseInput.selectedIndex = 1;
				else if(code == DONT_KNOW_CODE)
					q.refuseInput.selectedIndex = 2;
				else if(code == MISSING_CODE)
					q.refuseInput.selectedIndex = 3;
				else
					q.answer = val;
			}
			
			private function loadDBValue_qList(q:QuestionList, code:int):void
			{
				if(isNaN(code))
					q.disable();
				else
				{
					//first set it the index naively
					q.setAnswerIndex(code);
					//then if it can accept a special code, set it
					if(code == REFUSED_CODE)
						q.answer = REFUSED_VALUE;
					else if(code == DONT_KNOW_CODE)
						q.answer = DONT_KNOW_VALUE;
					else if(code == MISSING_CODE)
						q.answer = MISSING_VALUE;
					else if(code == YES_CODE)
						q.answer = YES_VALUE;
					else if(code == NO_CODE)
						q.answer = NO_VALUE;
				}
			}
			
			protected function getIndexFromValue(answer:String, q:QuestionList):int
			{
				if(answer == "Yes")
					return 1;
				if(answer == "No")
					return 0;
				if(answer == "Refused")
					return -7;
				if(answer == "Don't Know")
					return -8;
				if(answer == "Missing Data")
					return -9;
				return q.input.dataProvider.getItemIndex(answer);
			}	
			
			protected function getValueFromDBIndex(index:int, q:QuestionList):String
			{
				if(q.input.dataProvider.getItemAt(0) == YES_VALUE && q.input.dataProvider.getItemAt(1) == NO_VALUE)
				{
					if(index == YES_CODE)
						return YES_VALUE;
					if(index == NO_CODE)
						return NO_VALUE;
				}
				if(index == REFUSED_CODE)
					return REFUSED_VALUE;
				if(index == MISSING_CODE)
					return MISSING_VALUE;
				if(index == DONT_KNOW_CODE)
					return DONT_KNOW_VALUE;
				return q.input.dataProvider.getItemAt(index).toString();
			}
			
			protected override function formatErrorMessage(q:QuestionClass, res:ValidationResult):String
			{
				return (parent.parent.parent as NavigatorContent).label + " - " + q.codeName + " - " + res.errorMessage;
			}
		]]>
	</fx:Script>
	<fx:Style>
		@namespace s "library://ns.adobe.com/flex/spark";
		@namespace mx "library://ns.adobe.com/flex/mx";
		.h1{
			fontWeight: bold;
		}
	</fx:Style>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
</questions:QuestionForm>
